{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"- - mode: markdown; mode: visual-line; - - Amazon Web Services for Hydrosat Data Analytics Platform (DAP) \u00b6 This website hosts documents, slides, material, Hands-on videos and information related to the tutorial \u201c AWS for Hydrosat DAP \u201d given during the Hydrosat Training from RDI Consultancy . Covered Topics \u00b6 The objective of this tutorial is to offer a set of practical sessions and tutorials around AWS, for helping Hydrosat deploying their DAP on a cloud environment in order to have a stable and high perfromance work environment. The tutorial is covering the following areas in AWS: Start working on AWS by creating an account AWS Computing Run Python Scripts on EC2 Web servers on EC2 instances AWS Lightsail Other Computing Services: Serverless and Containers Storage volumes in AWS Networking in AWS Relational databases in AWS Load balancing and Scalling in AWS AWS Pricing and Support AWS Security and Access Management Beside the tutorial provided in these pages, there are some general concepts slides are provided such as: Table of Contents \u00b6 The following table summerizes the AWS Hands on training sessions for Hydrosat: Topic Concepts Technical Video Tutorial Understanding Cloud Concepts slides slides Introduction to AWS Infrastructure slides Creating an account on AWS slides watch link AWS Computing slides slides watch link Run python scripts on EC2 watch link Storage volumes in AWS slides slides watch link Docker Images on AWS slides slides link Networking in AWS slides slides link Load balancing and Scalling in AWS slides slides link AWS Pricing and Cost Mangement slides slides link AWS Support Plans slides slides link AWS Security and Access Management slides slides link Credits \u00b6 See the main contributor in the contact section Licence \u00b6 This project and the sources proposed within this repository are released under the terms of the GPL-3.0 licence.","title":"Home"},{"location":"#amazon-web-services-for-hydrosat-data-analytics-platform-dap","text":"This website hosts documents, slides, material, Hands-on videos and information related to the tutorial \u201c AWS for Hydrosat DAP \u201d given during the Hydrosat Training from RDI Consultancy .","title":"Amazon Web Services for Hydrosat Data Analytics Platform (DAP)"},{"location":"#covered-topics","text":"The objective of this tutorial is to offer a set of practical sessions and tutorials around AWS, for helping Hydrosat deploying their DAP on a cloud environment in order to have a stable and high perfromance work environment. The tutorial is covering the following areas in AWS: Start working on AWS by creating an account AWS Computing Run Python Scripts on EC2 Web servers on EC2 instances AWS Lightsail Other Computing Services: Serverless and Containers Storage volumes in AWS Networking in AWS Relational databases in AWS Load balancing and Scalling in AWS AWS Pricing and Support AWS Security and Access Management Beside the tutorial provided in these pages, there are some general concepts slides are provided such as:","title":"Covered Topics"},{"location":"#table-of-contents","text":"The following table summerizes the AWS Hands on training sessions for Hydrosat: Topic Concepts Technical Video Tutorial Understanding Cloud Concepts slides slides Introduction to AWS Infrastructure slides Creating an account on AWS slides watch link AWS Computing slides slides watch link Run python scripts on EC2 watch link Storage volumes in AWS slides slides watch link Docker Images on AWS slides slides link Networking in AWS slides slides link Load balancing and Scalling in AWS slides slides link AWS Pricing and Cost Mangement slides slides link AWS Support Plans slides slides link AWS Security and Access Management slides slides link","title":"Table of Contents"},{"location":"#credits","text":"See the main contributor in the contact section","title":"Credits"},{"location":"#licence","text":"This project and the sources proposed within this repository are released under the terms of the GPL-3.0 licence.","title":"Licence"},{"location":"AWS_Account/","text":"Setting Up an AWS Account \u00b6 Create your account \u00b6 In order to sign up to AWS services, please follow the following steps: Open the Amazon Web Services home page. Choose Create an AWS Account. Note: If you signed in to AWS recently, choose Sign in to the Console. If Create a new AWS account isn\u2019t visible, first choose Sign in to a different account, and then choose Create a new AWS account. Enter your account information, and then choose Continue. Be sure that you enter your account information correctly, especially your email address. If you enter your email address incorrectly, you can\u2019t access your account. Choose Personal or Professional. Note: Personal accounts and professional accounts have the same features and functions. Enter your company or personal information. Important: For professional AWS accounts, it\u2019s a best practice to enter the company phone number rather than a personal cell phone. Configuring a root account with an individual email address or a personal phone number can make your account insecure. Read and accept the AWS Customer Agreement. Note: Be sure that you read and understand the terms of the AWS Customer Agreement. Choose Create Account and Continue. You receive an email to confirm that your account is created. You can sign in to your new account using the email address and password you registered with. However, you can\u2019t use AWS services until you finish activating your account. Add a Payment Method \u00b6 On the Payment Information page, enter the information about your payment method, and then choose Verify and Add. Note: If you want to use a different billing address for your AWS billing information, choose Use a new address before you choose Verify and Add. Important: You cannot proceed with the sign-up process until you add a valid payment method. Verify your phone number \u00b6 Choose your country or region code from the list. Enter a phone number where you can be reached in the next few minutes. Enter the code displayed in the captcha and then submit. In a few moments, an automated system contacts you. Enter the PIN you receive, and then choose Continue. Choose an AWS Support plan \u00b6 On the Select a Support Plan page, choose one of the available Support plans. For a description of the available Support plans and their benefits, see Compare AWS Support Plans . Seting up Your Budget \u00b6 You need to set up your budget, in order to avoid any extra charges,. Any extra charges will be aletrted to you before going into action. Please follow the following steps to fix your budget: After you received you registration confirmation, sign in to the console . After a successed login to the console, naviaget to your account name, and choose My Billing Daschboard Choose on the left Budgets which is located under Cost Management, Then Press Craete Budget and choose the Cost budget, then press Set your budget Name the budget, period and budget amount, then press Configure alerts Choose the alert threshold, for example 50% Put your email address to send you alert when your charges become 50% from your budget Watch it here \u00b6","title":"Setting Up an AWS Account"},{"location":"AWS_Account/#setting-up-an-aws-account","text":"","title":"Setting Up an AWS Account"},{"location":"AWS_Account/#create-your-account","text":"In order to sign up to AWS services, please follow the following steps: Open the Amazon Web Services home page. Choose Create an AWS Account. Note: If you signed in to AWS recently, choose Sign in to the Console. If Create a new AWS account isn\u2019t visible, first choose Sign in to a different account, and then choose Create a new AWS account. Enter your account information, and then choose Continue. Be sure that you enter your account information correctly, especially your email address. If you enter your email address incorrectly, you can\u2019t access your account. Choose Personal or Professional. Note: Personal accounts and professional accounts have the same features and functions. Enter your company or personal information. Important: For professional AWS accounts, it\u2019s a best practice to enter the company phone number rather than a personal cell phone. Configuring a root account with an individual email address or a personal phone number can make your account insecure. Read and accept the AWS Customer Agreement. Note: Be sure that you read and understand the terms of the AWS Customer Agreement. Choose Create Account and Continue. You receive an email to confirm that your account is created. You can sign in to your new account using the email address and password you registered with. However, you can\u2019t use AWS services until you finish activating your account.","title":"Create your account"},{"location":"AWS_Account/#add-a-payment-method","text":"On the Payment Information page, enter the information about your payment method, and then choose Verify and Add. Note: If you want to use a different billing address for your AWS billing information, choose Use a new address before you choose Verify and Add. Important: You cannot proceed with the sign-up process until you add a valid payment method.","title":"Add a Payment Method"},{"location":"AWS_Account/#verify-your-phone-number","text":"Choose your country or region code from the list. Enter a phone number where you can be reached in the next few minutes. Enter the code displayed in the captcha and then submit. In a few moments, an automated system contacts you. Enter the PIN you receive, and then choose Continue.","title":"Verify your phone number"},{"location":"AWS_Account/#choose-an-aws-support-plan","text":"On the Select a Support Plan page, choose one of the available Support plans. For a description of the available Support plans and their benefits, see Compare AWS Support Plans .","title":"Choose an AWS Support plan"},{"location":"AWS_Account/#seting-up-your-budget","text":"You need to set up your budget, in order to avoid any extra charges,. Any extra charges will be aletrted to you before going into action. Please follow the following steps to fix your budget: After you received you registration confirmation, sign in to the console . After a successed login to the console, naviaget to your account name, and choose My Billing Daschboard Choose on the left Budgets which is located under Cost Management, Then Press Craete Budget and choose the Cost budget, then press Set your budget Name the budget, period and budget amount, then press Configure alerts Choose the alert threshold, for example 50% Put your email address to send you alert when your charges become 50% from your budget","title":"Seting up Your Budget"},{"location":"AWS_Account/#watch-it-here","text":"","title":"Watch it here"},{"location":"AmazonEBS/","text":"","title":"AmazonEBS"},{"location":"EBS/","text":"Amazon EBS volumes \u00b6 An Amazon EBS volume is a durable, block-level storage device that you can attach to your instances. After you attach a volume to an instance, you can use it as you would use a physical hard drive. EBS volumes are flexible. For current-generation volumes attached to current-generation instance types, you can dynamically increase size, modify the provisioned IOPS capacity, and change volume type on live production volumes. You can use EBS volumes as primary storage for data that requires frequent updates, such as the system drive for an instance or storage for a database application. You can also use them for throughput-intensive applications that perform continuous disk scans. EBS volumes persist independently from the running life of an EC2 instance. You can attach multiple EBS volumes to a single instance. The volume and instance must be in the same Availability Zone. Depending on the volume and instance types, you can use Multi-Attach to mount a volume to multiple instances at the same time. Amazon EBS provides the following volume types: General Purpose SSD ( gp2 ), Provisioned IOPS SSD ( io1 ), Throughput Optimized HDD ( st1 ), Cold HDD ( sc1 ), and Magnetic ( standard , a previous-generation type). They differ in performance characteristics and price, allowing you to tailor your storage performance and cost to the needs of your applications. For more information, see Amazon EBS volume types . Your account has a limit on the number of EBS volumes that you can use, and the total storage available to you. For more information about these limits, and how to request an increase in your limits, see Amazon EC2 Service Quotas . What to know befor creating an EBS volume \u00b6 Benefits of using EBS volumes Amazon EBS volume types Constraints on the size and configuration of an EBS volume Creating an Amazon EBS volume \u00b6 You can create an Amazon EBS volume and then attach to any EC2 instance in the same Availability Zone. If you create an encrypted EBS volume, you can only attach it to supported instance types. For more information, see Supported instance types . If you are creating a volume for a high-performance storage scenario, you should make sure to use a Provisioned IOPS SSD (io1) volume and attach it to an instance with enough bandwidth to support your application, such as an EBS-optimized instance or an instance with 10-Gigabit network connectivity. The same advice holds for Throughput Optimized HDD (st1) and Cold HDD (sc1) volumes. For more information, see Amazon EBS\u2013optimized instances . Empty EBS volumes receive their maximum performance the moment that they are available and do not require initialization (formerly known as pre-warming). However, storage blocks on volumes that were created from snapshots must be initialized (pulled down from Amazon S3 and written to the volume) before you can access the block. This preliminary action takes time and can cause a significant increase in the latency of an I/O operation the first time each block is accessed. Volume performance is achieved after all blocks have been downloaded and written to the volume. For most applications, amortizing this cost over the lifetime of the volume is acceptable. To avoid this initial performance hit in a production environment, you can force immediate initialization of the entire volume or enable fast snapshot restore. For more information, see Initializing Amazon EBS volumes . Methods of creating a volume \u00b6 Create and attach EBS volumes when you launch instances by specifying a block device mapping. For more information, see Launching an instance using the Launch Instance Wizard and Block device mapping . Create an empty EBS volume and attach it to a running instance. For more information, see Creating an empty volume below. Create an EBS volume from a previously created snapshot and attach it to a running instance. For more information, see Creating a volume from a snapshot below. Creating an empty volume \u00b6 Empty volumes receive their maximum performance the moment that they are available and do not require initialization . To create a empty EBS volume using the console \u00b6 Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, select the Region in which you would like to create your volume. This choice is important because some Amazon EC2 resources can be shared between Regions, while others can\u2019t. For more information, see Resource locations . In the navigation pane, choose ELASTIC BLOCK STORE, Volumes . Choose Create Volume . For Volume Type , choose a volume type. For more information, see Amazon EBS volume types . For Size (GiB) , type the size of the volume. For more information, see Constraints on the size and configuration of an EBS volume . With a Provisioned IOPS SSD volume, for IOPS , type the maximum number of input/output operations per second (IOPS) that the volume should support. For Availability Zone , choose the Availability Zone in which to create the volume. EBS volumes can only be attached to EC2 instances within the same Availability Zone. (Optional) If the instance type supports EBS encryption and you want to encrypt the volume, select Encrypt this volume and choose a CMK . If encryption by default is enabled in this Region, EBS encryption is enabled and the default CMK for EBS encryption is chosen. You can choose a different CMK from Master Key or paste the full ARN of any key that you can access. For more information, see Amazon EBS encryption . (Optional) Choose Create additional tags to add tags to the volume. For each tag, provide a tag key and a tag value. For more information, see Tagging your Amazon EC2 resources . Choose Create Volume . The volume is ready for use when the volume status is Available . To use your new volume, attach it to an instance, format it, and mount it. For more information, see Attaching an Amazon EBS volume to an instance . To create an empty EBS volume using the command line \u00b6 You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-volume (AWS CLI) New-EC2Volume (AWS Tools for Windows PowerShell) Creating a volume from a snapshot \u00b6 Volumes created from snapshots load lazily in the background. This means that there is no need to wait for all of the data to transfer from Amazon S3 to your EBS volume before the instance can start accessing an attached volume and all its data. If your instance accesses data that hasn\u2019t yet been loaded, the volume immediately downloads the requested data from Amazon S3, and then continues loading the rest of the volume data in the background. Volume performance is achieved after all blocks are downloaded and written to the volume. To avoid the initial performance hit in a production environment, see Initializing Amazon EBS volumes . New EBS volumes that are created from encrypted snapshots are automatically encrypted. You can also encrypt a volume on-the-fly while restoring it from an unencrypted snapshot. Encrypted volumes can only be attached to instance types that support EBS encryption. For more information, see Supported instance types . To create an EBS volume from a snapshot using the console \u00b6 Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, select the Region that your snapshot is located in. To use the snapshot to create a volume in a different region, copy your snapshot to the new Region and then use it to create a volume in that Region. For more information, see Copying an Amazon EBS snapshot . In the navigation pane, choose ELASTIC BLOCK STORE, Volumes . Choose Create Volume . For Volume Type , choose a volume type. For more information, see Amazon EBS volume types . For Snapshot ID , start typing the ID or description of the snapshot from which you are restoring the volume, and choose it from the list of suggested options. (Optional) Select Encrypt this volume to change the encryption state of your volume. This is optional if encryption by default is enabled. Select a CMK from Master Key to specify a CMK other than the default CMK for EBS encryption. For Size (GiB) , type the size of the volume, or verify that the default size of the snapshot is adequate. If you specify both a volume size and a snapshot, the size must be equal to or greater than the snapshot size. When you select a volume type and a snapshot, the minimum and maximum sizes for the volume are shown next to Size. For more information, see Constraints on the size and configuration of an EBS volume . With a Provisioned IOPS SSD volume, for IOPS , type the maximum number of input/output operations per second (IOPS) that the volume should support. For Availability Zone , choose the Availability Zone in which to create the volume. EBS volumes can only be attached to EC2 instances in the same Availability Zone. (Optional) Choose Create additional tags to add tags to the volume. For each tag, provide a tag key and a tag value. Choose Create Volume . To use your new volume, attach it to an instance and mount it. For more information, see Attaching an Amazon EBS volume to an instance . If you created a volume that is larger than the snapshot, you must extend the file system on the volume to take advantage of the extra space. For more information, see Amazon EBS Elastic Volumes . To create an EBS volume from a snapshot using the command line \u00b6 You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-volume (AWS CLI) New-EC2Volume (AWS Tools for Windows PowerShell) Attaching an Amazon EBS volume to an instance \u00b6 You can attach an available EBS volume to one or more of your instances that is in the same Availability Zone as the volume. Prerequisites \u00b6 Determine how many volumes you can attach to your instance. For more information, see Instance volume limits . Determine whether you can attach your volume to multiple instances and enable Multi-Attach. For more information, see Attaching a volume to multiple instances with Amazon EBS Multi-Attach . If a volume is encrypted, it can only be attached to an instance that supports Amazon EBS encryption. For more information, see Supported instance types . If a volume has an AWS Marketplace product code: The volume can only be attached to a stopped instance. You must be subscribed to the AWS Marketplace code that is on the volume. The configuration (instance type, operating system) of the instance must support that specific AWS Marketplace code. For example, you cannot take a volume from a Windows instance and attach it to a Linux instance. AWS Marketplace product codes are copied from the volume to the instance. To attach an EBS volume to an instance using the console \u00b6 Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Elastic Block Store, Volumes . Select an available volume and choose Actions, Attach Volume . For Instance , start typing the name or ID of the instance. Select the instance from the list of options (only instances that are in the same Availability Zone as the volume are displayed). For Device , you can keep the suggested device name, or type a different supported device name. For more information, see Device naming on Linux instances . Choose Attach . Connect to your instance and mount the volume. For more information, see Making an Amazon EBS volume available for use on Linux . To attach an EBS volume to an instance using the command line \u00b6 You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . attach-volume (AWS CLI) Add-EC2Volume (AWS Tools for Windows PowerShell) More advanced attachment \u00b6 Attaching a volume to multiple instances with Amazon EBS Multi-Attach Making an Amazon EBS volume available for use on Linux \u00b6 After you attach an Amazon EBS volume to your instance, it is exposed as a block device. You can format the volume with any file system and then mount it. After you make the EBS volume available for use, you can access it in the same ways that you access any other volume. Any data written to this file system is written to the EBS volume and is transparent to applications using the device. You can take snapshots of your EBS volume for backup purposes or to use as a baseline when you create another volume. For more information, see Amazon EBS snapshots . Format and mount an attached volume \u00b6 Suppose that you have an EC2 instance with an EBS volume for the root device, /dev/xvda , and that you have just attached an empty EBS volume to the instance using /dev/sdf . Use the following procedure to make the newly attached volume available for use. To format and mount an EBS volume on Linux Connect to your instance using SSH. For more information, see Connect to your Linux instance . The device could be attached to the instance with a different device name than you specified in the block device mapping. For more information, see Device naming on Linux instances . Use the lsblk command to view your available disk devices and their mount points (if applicable) to help you determine the correct device name to use. The output of lsblk removes the /dev/ prefix from full device paths. The following is example output for a T2 instance. The root device is /dev/xvda . The attached volume is not attached yet (it will be /dev/xvdf ), ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 The following is example output for a T2 instance. The root device is /dev/xvda . The attached volume ( 5G ) is /dev/xvdf , which is not yet mounted. ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 Determine whether there is a file system on the volume. New volumes are raw block devices, and you must create a file system on them before you can mount and use them. Volumes that were created from snapshots likely have a file system on them already; if you create a new file system on top of an existing file system, the operation overwrites your data. Use the file -s command to get information about a device, such as its file system type. If the output shows simply data , as in the following example output, there is no file system on the device and you must create one. ubuntu@ip-172-31-38-59:~$ sudo file -s /dev/xvdf /dev/xvdf: data If the device has a file system, the command shows information about the file system type. For example, the following output shows a root device with the XFS file system. ubuntu@ip-172-31-38-59:~$ sudo file -s /dev/xvda1 /dev/xvda1: Linux rev 1.0 ext4 filesystem data, UUID=aff0a17d-b917-4350-93b2-3a2eab2067bc, volume name \"cloudimg-rootfs\" (needs journal recovery) (extents) (large files) (huge files) (Conditional) If you discovered that there is a file system on the device in the previous step, skip this step. If you have an empty volume, use the mkfs -t command to create a file system on the volume. /!\\ Important Warning Do not use this command if you're mounting a volume that already has data on it (for example, a volume that was created from a snapshot). Otherwise, you'll format the volume and delete the existing data. ubuntu@ip-172-31-38-59:~$ sudo mkfs -t xfs /dev/xvdf meta-data=/dev/xvdf isize=512 agcount=4, agsize=327680 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=0 data = bsize=4096 blocks=1310720, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 If you get an error that mkfs.xfs is not found, use the following command to install the XFS tools and then repeat the previous command: ubuntu@ip-172-31-38-59:~$ sudo yum install xfsprogs Use the mkdir command to create a mount point directory for the volume. The mount point is where the volume is located in the file system tree and where you read and write files to after you mount the volume. The following example creates a directory named /data . ubuntu@ip-172-31-38-59:~$ sudo mkdir /data Use the following command to mount the volume at the directory you created in the previous step. ubuntu@ip-172-31-38-59:~$ sudo mount /dev/xvdf /data Review the file permissions of your new volume mount to make sure that your users and applications can write to the volume. For more information about file permissions, see File security at The Linux Documentation Project. The mount point is not automatically preserved after rebooting your instance. To automatically mount this EBS volume after reboot, see Automatically mount an attached volume after reboot . Check your instance\u2019s volume size \u00b6 First of all, you can check again your volume, if it is mounted or not , by ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk /data loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 you can see, the xvdf volume is mounted to the /data/ , that is meant that the mounting has been successed. Use df command to check the volumes sizes: ubuntu@ip-172-31-38-59:~$ df Filesystem 1K-blocks Used Available Use% Mounted on udev 499320 0 499320 0% /dev tmpfs 101444 10956 90488 11% /run /dev/xvda1 8065444 2087224 5961836 26% / tmpfs 507208 0 507208 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 507208 0 507208 0% /sys/fs/cgroup /dev/loop1 18432 18432 0 100% /snap/amazon-ssm-agent/1566 /dev/loop2 99328 99328 0 100% /snap/core/9665 /dev/loop3 28800 28800 0 100% /snap/amazon-ssm-agent/2012 /dev/loop4 98944 98944 0 100% /snap/core/9804 tmpfs 101444 0 101444 0% /run/user/1000 /dev/xvdf 5232640 32960 5199680 1% /data you can see the last volume /dev/xvdf detailes and it is mounted to the /data , if you want to see specific volume by: ubuntu@ip-172-31-38-59:~$ df /data/ Filesystem 1K-blocks Used Available Use% Mounted on /dev/xvdf 5232640 32964 5199676 1% /data Use your new volume, by navigating to /data and start add files: ubuntu@ip-172-31-38-59:~$ cd /data/ ubuntu@ip-172-31-38-59:/data$ ls hydrosat test.py Making an Amazon EBS volume available for use on Windows \u00b6 You can get directions for volumes on a Windows instance from Making a Volume Available for Use on Windows in the Amazon EC2 User Guide for Windows Instances. You can get directions for volumes on a Windows instance from Detaching a volume from a Windows instance in the Amazon EC2 User Guide for Windows Instances. Releasing an Amazon EBS volume \u00b6 In order to releasing an EBS volume, you need to: Detaching the EBS volume Deleting the EBS Volume Detaching an Amazon EBS volume from a Linux instance \u00b6 You can detach an Amazon EBS volume from an instance explicitly or by terminating the instance. However, if the instance is running, you must first unmount the volume from the instance. If an EBS volume is the root device of an instance, you must stop the instance before you can detach the volume. When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance. /!\\ Important After you detach a volume, you are still charged for volume storage as long as the storage amount exceeds the limit of the AWS Free Tier. You must delete a volume to avoid incurring further charges. For more information, see Deleting an Amazon EBS volume . This example unmounts the volume and then explicitly detaches it from the instance. This is useful when you want to terminate an instance or attach a volume to a different instance. To verify that the volume is no longer attached to the instance, see Viewing information about an Amazon EBS volume . You can reattach a volume that you detached (without unmounting it), but it might not get the same mount point. If there were writes to the volume in progress when it was detached, the data on the volume might be out of sync. To detach an EBS volume using the console \u00b6 From your Linux instance, use the following command to unmount the /dev/sdh device. ubuntu@ip-172-31-38-59:~$ umount -d /dev/sdh Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Volumes . Select a volume and choose Actions, Detach Volume . In the confirmation dialog box, choose Yes, Detach . Example: \u00b6 Before umount ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk /data loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 After umount ubuntu@ip-172-31-38-59:~$ sudo umount -d /data ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 After Detached ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 To detach an EBS volume using the command line \u00b6 After unmounting the volume, you can use one of the following commands to detach it. For more information about these command line interfaces, see Accessing Amazon EC2 . detach-volume (AWS CLI) Dismount-EC2Volume (AWS Tools for Windows PowerShell) Deleting an Amazon EBS volume \u00b6 After you no longer need an Amazon EBS volume, you can delete it. After deletion, its data is gone and the volume can\u2019t be attached to any instance. However, before deletion, you can store a snapshot of the volume, which you can use to re-create the volume later. /!\\ Important You can\u2019t delete a volume if it\u2019s attached to an instance. To delete a volume, you must first detach it. For more information, see Detaching an Amazon EBS volume from a Linux instance . You can check if a volume is attached to an instance. In the console, on the Volumes page , you can view the state of your volumes. If a volume is attached to an instance, it\u2019s in the in-use state. If a volume is detached from an instance, it\u2019s in the available state. You can delete this volume. To delete an EBS volume using the console \u00b6 Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Volumes . Select a volume and choose Actions, Delete Volume . If Delete Volume is greyed out, the volume is attached to the instance. In the confirmation dialog box, choose Yes, Delete . To delete an EBS volume using the command line \u00b6 You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . delete-volume (AWS CLI) Remove-EC2Volume (AWS Tools for Windows PowerShell) Watch it here \u00b6 Create, attach, and mount a new EBS volume \u00b6 Detach, unmount, and delet an existing EBS volume \u00b6 References \u00b6 Viewing information about an Amazon EBS volume Replacing an Amazon EBS volume using a previous snapshot Monitoring the status of your volumes Detaching an Amazon EBS volume from a Linux instance Deleting an Amazon EBS volume","title":"Amazon EBS volumes"},{"location":"EBS/#amazon-ebs-volumes","text":"An Amazon EBS volume is a durable, block-level storage device that you can attach to your instances. After you attach a volume to an instance, you can use it as you would use a physical hard drive. EBS volumes are flexible. For current-generation volumes attached to current-generation instance types, you can dynamically increase size, modify the provisioned IOPS capacity, and change volume type on live production volumes. You can use EBS volumes as primary storage for data that requires frequent updates, such as the system drive for an instance or storage for a database application. You can also use them for throughput-intensive applications that perform continuous disk scans. EBS volumes persist independently from the running life of an EC2 instance. You can attach multiple EBS volumes to a single instance. The volume and instance must be in the same Availability Zone. Depending on the volume and instance types, you can use Multi-Attach to mount a volume to multiple instances at the same time. Amazon EBS provides the following volume types: General Purpose SSD ( gp2 ), Provisioned IOPS SSD ( io1 ), Throughput Optimized HDD ( st1 ), Cold HDD ( sc1 ), and Magnetic ( standard , a previous-generation type). They differ in performance characteristics and price, allowing you to tailor your storage performance and cost to the needs of your applications. For more information, see Amazon EBS volume types . Your account has a limit on the number of EBS volumes that you can use, and the total storage available to you. For more information about these limits, and how to request an increase in your limits, see Amazon EC2 Service Quotas .","title":"Amazon EBS volumes"},{"location":"EBS/#what-to-know-befor-creating-an-ebs-volume","text":"Benefits of using EBS volumes Amazon EBS volume types Constraints on the size and configuration of an EBS volume","title":"What to know befor creating an EBS volume"},{"location":"EBS/#creating-an-amazon-ebs-volume","text":"You can create an Amazon EBS volume and then attach to any EC2 instance in the same Availability Zone. If you create an encrypted EBS volume, you can only attach it to supported instance types. For more information, see Supported instance types . If you are creating a volume for a high-performance storage scenario, you should make sure to use a Provisioned IOPS SSD (io1) volume and attach it to an instance with enough bandwidth to support your application, such as an EBS-optimized instance or an instance with 10-Gigabit network connectivity. The same advice holds for Throughput Optimized HDD (st1) and Cold HDD (sc1) volumes. For more information, see Amazon EBS\u2013optimized instances . Empty EBS volumes receive their maximum performance the moment that they are available and do not require initialization (formerly known as pre-warming). However, storage blocks on volumes that were created from snapshots must be initialized (pulled down from Amazon S3 and written to the volume) before you can access the block. This preliminary action takes time and can cause a significant increase in the latency of an I/O operation the first time each block is accessed. Volume performance is achieved after all blocks have been downloaded and written to the volume. For most applications, amortizing this cost over the lifetime of the volume is acceptable. To avoid this initial performance hit in a production environment, you can force immediate initialization of the entire volume or enable fast snapshot restore. For more information, see Initializing Amazon EBS volumes .","title":"Creating an Amazon EBS volume"},{"location":"EBS/#methods-of-creating-a-volume","text":"Create and attach EBS volumes when you launch instances by specifying a block device mapping. For more information, see Launching an instance using the Launch Instance Wizard and Block device mapping . Create an empty EBS volume and attach it to a running instance. For more information, see Creating an empty volume below. Create an EBS volume from a previously created snapshot and attach it to a running instance. For more information, see Creating a volume from a snapshot below.","title":"Methods of creating a volume"},{"location":"EBS/#creating-an-empty-volume","text":"Empty volumes receive their maximum performance the moment that they are available and do not require initialization .","title":"Creating an empty volume"},{"location":"EBS/#to-create-a-empty-ebs-volume-using-the-console","text":"Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, select the Region in which you would like to create your volume. This choice is important because some Amazon EC2 resources can be shared between Regions, while others can\u2019t. For more information, see Resource locations . In the navigation pane, choose ELASTIC BLOCK STORE, Volumes . Choose Create Volume . For Volume Type , choose a volume type. For more information, see Amazon EBS volume types . For Size (GiB) , type the size of the volume. For more information, see Constraints on the size and configuration of an EBS volume . With a Provisioned IOPS SSD volume, for IOPS , type the maximum number of input/output operations per second (IOPS) that the volume should support. For Availability Zone , choose the Availability Zone in which to create the volume. EBS volumes can only be attached to EC2 instances within the same Availability Zone. (Optional) If the instance type supports EBS encryption and you want to encrypt the volume, select Encrypt this volume and choose a CMK . If encryption by default is enabled in this Region, EBS encryption is enabled and the default CMK for EBS encryption is chosen. You can choose a different CMK from Master Key or paste the full ARN of any key that you can access. For more information, see Amazon EBS encryption . (Optional) Choose Create additional tags to add tags to the volume. For each tag, provide a tag key and a tag value. For more information, see Tagging your Amazon EC2 resources . Choose Create Volume . The volume is ready for use when the volume status is Available . To use your new volume, attach it to an instance, format it, and mount it. For more information, see Attaching an Amazon EBS volume to an instance .","title":"To create a empty EBS volume using the console"},{"location":"EBS/#to-create-an-empty-ebs-volume-using-the-command-line","text":"You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-volume (AWS CLI) New-EC2Volume (AWS Tools for Windows PowerShell)","title":"To create an empty EBS volume using the command line"},{"location":"EBS/#creating-a-volume-from-a-snapshot","text":"Volumes created from snapshots load lazily in the background. This means that there is no need to wait for all of the data to transfer from Amazon S3 to your EBS volume before the instance can start accessing an attached volume and all its data. If your instance accesses data that hasn\u2019t yet been loaded, the volume immediately downloads the requested data from Amazon S3, and then continues loading the rest of the volume data in the background. Volume performance is achieved after all blocks are downloaded and written to the volume. To avoid the initial performance hit in a production environment, see Initializing Amazon EBS volumes . New EBS volumes that are created from encrypted snapshots are automatically encrypted. You can also encrypt a volume on-the-fly while restoring it from an unencrypted snapshot. Encrypted volumes can only be attached to instance types that support EBS encryption. For more information, see Supported instance types .","title":"Creating a volume from a snapshot"},{"location":"EBS/#to-create-an-ebs-volume-from-a-snapshot-using-the-console","text":"Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, select the Region that your snapshot is located in. To use the snapshot to create a volume in a different region, copy your snapshot to the new Region and then use it to create a volume in that Region. For more information, see Copying an Amazon EBS snapshot . In the navigation pane, choose ELASTIC BLOCK STORE, Volumes . Choose Create Volume . For Volume Type , choose a volume type. For more information, see Amazon EBS volume types . For Snapshot ID , start typing the ID or description of the snapshot from which you are restoring the volume, and choose it from the list of suggested options. (Optional) Select Encrypt this volume to change the encryption state of your volume. This is optional if encryption by default is enabled. Select a CMK from Master Key to specify a CMK other than the default CMK for EBS encryption. For Size (GiB) , type the size of the volume, or verify that the default size of the snapshot is adequate. If you specify both a volume size and a snapshot, the size must be equal to or greater than the snapshot size. When you select a volume type and a snapshot, the minimum and maximum sizes for the volume are shown next to Size. For more information, see Constraints on the size and configuration of an EBS volume . With a Provisioned IOPS SSD volume, for IOPS , type the maximum number of input/output operations per second (IOPS) that the volume should support. For Availability Zone , choose the Availability Zone in which to create the volume. EBS volumes can only be attached to EC2 instances in the same Availability Zone. (Optional) Choose Create additional tags to add tags to the volume. For each tag, provide a tag key and a tag value. Choose Create Volume . To use your new volume, attach it to an instance and mount it. For more information, see Attaching an Amazon EBS volume to an instance . If you created a volume that is larger than the snapshot, you must extend the file system on the volume to take advantage of the extra space. For more information, see Amazon EBS Elastic Volumes .","title":"To create an EBS volume from a snapshot using the console"},{"location":"EBS/#to-create-an-ebs-volume-from-a-snapshot-using-the-command-line","text":"You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-volume (AWS CLI) New-EC2Volume (AWS Tools for Windows PowerShell)","title":"To create an EBS volume from a snapshot using the command line"},{"location":"EBS/#attaching-an-amazon-ebs-volume-to-an-instance","text":"You can attach an available EBS volume to one or more of your instances that is in the same Availability Zone as the volume.","title":"Attaching an Amazon EBS volume to an instance"},{"location":"EBS/#prerequisites","text":"Determine how many volumes you can attach to your instance. For more information, see Instance volume limits . Determine whether you can attach your volume to multiple instances and enable Multi-Attach. For more information, see Attaching a volume to multiple instances with Amazon EBS Multi-Attach . If a volume is encrypted, it can only be attached to an instance that supports Amazon EBS encryption. For more information, see Supported instance types . If a volume has an AWS Marketplace product code: The volume can only be attached to a stopped instance. You must be subscribed to the AWS Marketplace code that is on the volume. The configuration (instance type, operating system) of the instance must support that specific AWS Marketplace code. For example, you cannot take a volume from a Windows instance and attach it to a Linux instance. AWS Marketplace product codes are copied from the volume to the instance.","title":"Prerequisites"},{"location":"EBS/#to-attach-an-ebs-volume-to-an-instance-using-the-console","text":"Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Elastic Block Store, Volumes . Select an available volume and choose Actions, Attach Volume . For Instance , start typing the name or ID of the instance. Select the instance from the list of options (only instances that are in the same Availability Zone as the volume are displayed). For Device , you can keep the suggested device name, or type a different supported device name. For more information, see Device naming on Linux instances . Choose Attach . Connect to your instance and mount the volume. For more information, see Making an Amazon EBS volume available for use on Linux .","title":"To attach an EBS volume to an instance using the console"},{"location":"EBS/#to-attach-an-ebs-volume-to-an-instance-using-the-command-line","text":"You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . attach-volume (AWS CLI) Add-EC2Volume (AWS Tools for Windows PowerShell)","title":"To attach an EBS volume to an instance using the command line"},{"location":"EBS/#more-advanced-attachment","text":"Attaching a volume to multiple instances with Amazon EBS Multi-Attach","title":"More advanced attachment"},{"location":"EBS/#making-an-amazon-ebs-volume-available-for-use-on-linux","text":"After you attach an Amazon EBS volume to your instance, it is exposed as a block device. You can format the volume with any file system and then mount it. After you make the EBS volume available for use, you can access it in the same ways that you access any other volume. Any data written to this file system is written to the EBS volume and is transparent to applications using the device. You can take snapshots of your EBS volume for backup purposes or to use as a baseline when you create another volume. For more information, see Amazon EBS snapshots .","title":"Making an Amazon EBS volume available for use on Linux"},{"location":"EBS/#format-and-mount-an-attached-volume","text":"Suppose that you have an EC2 instance with an EBS volume for the root device, /dev/xvda , and that you have just attached an empty EBS volume to the instance using /dev/sdf . Use the following procedure to make the newly attached volume available for use. To format and mount an EBS volume on Linux Connect to your instance using SSH. For more information, see Connect to your Linux instance . The device could be attached to the instance with a different device name than you specified in the block device mapping. For more information, see Device naming on Linux instances . Use the lsblk command to view your available disk devices and their mount points (if applicable) to help you determine the correct device name to use. The output of lsblk removes the /dev/ prefix from full device paths. The following is example output for a T2 instance. The root device is /dev/xvda . The attached volume is not attached yet (it will be /dev/xvdf ), ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 The following is example output for a T2 instance. The root device is /dev/xvda . The attached volume ( 5G ) is /dev/xvdf , which is not yet mounted. ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 Determine whether there is a file system on the volume. New volumes are raw block devices, and you must create a file system on them before you can mount and use them. Volumes that were created from snapshots likely have a file system on them already; if you create a new file system on top of an existing file system, the operation overwrites your data. Use the file -s command to get information about a device, such as its file system type. If the output shows simply data , as in the following example output, there is no file system on the device and you must create one. ubuntu@ip-172-31-38-59:~$ sudo file -s /dev/xvdf /dev/xvdf: data If the device has a file system, the command shows information about the file system type. For example, the following output shows a root device with the XFS file system. ubuntu@ip-172-31-38-59:~$ sudo file -s /dev/xvda1 /dev/xvda1: Linux rev 1.0 ext4 filesystem data, UUID=aff0a17d-b917-4350-93b2-3a2eab2067bc, volume name \"cloudimg-rootfs\" (needs journal recovery) (extents) (large files) (huge files) (Conditional) If you discovered that there is a file system on the device in the previous step, skip this step. If you have an empty volume, use the mkfs -t command to create a file system on the volume. /!\\ Important Warning Do not use this command if you're mounting a volume that already has data on it (for example, a volume that was created from a snapshot). Otherwise, you'll format the volume and delete the existing data. ubuntu@ip-172-31-38-59:~$ sudo mkfs -t xfs /dev/xvdf meta-data=/dev/xvdf isize=512 agcount=4, agsize=327680 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=0 data = bsize=4096 blocks=1310720, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 If you get an error that mkfs.xfs is not found, use the following command to install the XFS tools and then repeat the previous command: ubuntu@ip-172-31-38-59:~$ sudo yum install xfsprogs Use the mkdir command to create a mount point directory for the volume. The mount point is where the volume is located in the file system tree and where you read and write files to after you mount the volume. The following example creates a directory named /data . ubuntu@ip-172-31-38-59:~$ sudo mkdir /data Use the following command to mount the volume at the directory you created in the previous step. ubuntu@ip-172-31-38-59:~$ sudo mount /dev/xvdf /data Review the file permissions of your new volume mount to make sure that your users and applications can write to the volume. For more information about file permissions, see File security at The Linux Documentation Project. The mount point is not automatically preserved after rebooting your instance. To automatically mount this EBS volume after reboot, see Automatically mount an attached volume after reboot .","title":"Format and mount an attached volume"},{"location":"EBS/#check-your-instances-volume-size","text":"First of all, you can check again your volume, if it is mounted or not , by ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk /data loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 you can see, the xvdf volume is mounted to the /data/ , that is meant that the mounting has been successed. Use df command to check the volumes sizes: ubuntu@ip-172-31-38-59:~$ df Filesystem 1K-blocks Used Available Use% Mounted on udev 499320 0 499320 0% /dev tmpfs 101444 10956 90488 11% /run /dev/xvda1 8065444 2087224 5961836 26% / tmpfs 507208 0 507208 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 507208 0 507208 0% /sys/fs/cgroup /dev/loop1 18432 18432 0 100% /snap/amazon-ssm-agent/1566 /dev/loop2 99328 99328 0 100% /snap/core/9665 /dev/loop3 28800 28800 0 100% /snap/amazon-ssm-agent/2012 /dev/loop4 98944 98944 0 100% /snap/core/9804 tmpfs 101444 0 101444 0% /run/user/1000 /dev/xvdf 5232640 32960 5199680 1% /data you can see the last volume /dev/xvdf detailes and it is mounted to the /data , if you want to see specific volume by: ubuntu@ip-172-31-38-59:~$ df /data/ Filesystem 1K-blocks Used Available Use% Mounted on /dev/xvdf 5232640 32964 5199676 1% /data Use your new volume, by navigating to /data and start add files: ubuntu@ip-172-31-38-59:~$ cd /data/ ubuntu@ip-172-31-38-59:/data$ ls hydrosat test.py","title":"Check your instance's volume size"},{"location":"EBS/#making-an-amazon-ebs-volume-available-for-use-on-windows","text":"You can get directions for volumes on a Windows instance from Making a Volume Available for Use on Windows in the Amazon EC2 User Guide for Windows Instances. You can get directions for volumes on a Windows instance from Detaching a volume from a Windows instance in the Amazon EC2 User Guide for Windows Instances.","title":"Making an Amazon EBS volume available for use on Windows"},{"location":"EBS/#releasing-an-amazon-ebs-volume","text":"In order to releasing an EBS volume, you need to: Detaching the EBS volume Deleting the EBS Volume","title":"Releasing an Amazon EBS volume"},{"location":"EBS/#detaching-an-amazon-ebs-volume-from-a-linux-instance","text":"You can detach an Amazon EBS volume from an instance explicitly or by terminating the instance. However, if the instance is running, you must first unmount the volume from the instance. If an EBS volume is the root device of an instance, you must stop the instance before you can detach the volume. When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance. /!\\ Important After you detach a volume, you are still charged for volume storage as long as the storage amount exceeds the limit of the AWS Free Tier. You must delete a volume to avoid incurring further charges. For more information, see Deleting an Amazon EBS volume . This example unmounts the volume and then explicitly detaches it from the instance. This is useful when you want to terminate an instance or attach a volume to a different instance. To verify that the volume is no longer attached to the instance, see Viewing information about an Amazon EBS volume . You can reattach a volume that you detached (without unmounting it), but it might not get the same mount point. If there were writes to the volume in progress when it was detached, the data on the volume might be out of sync.","title":"Detaching an Amazon EBS volume from a Linux instance"},{"location":"EBS/#to-detach-an-ebs-volume-using-the-console","text":"From your Linux instance, use the following command to unmount the /dev/sdh device. ubuntu@ip-172-31-38-59:~$ umount -d /dev/sdh Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Volumes . Select a volume and choose Actions, Detach Volume . In the confirmation dialog box, choose Yes, Detach .","title":"To detach an EBS volume using the console"},{"location":"EBS/#example","text":"Before umount ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk /data loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 After umount ubuntu@ip-172-31-38-59:~$ sudo umount -d /data ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / xvdf 202:80 0 5G 0 disk loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804 After Detached ubuntu@ip-172-31-38-59:~$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk \u2514\u2500xvda1 202:1 0 8G 0 part / loop1 7:1 0 18M 1 loop /snap/amazon-ssm-agent/1566 loop2 7:2 0 97M 1 loop /snap/core/9665 loop3 7:3 0 28.1M 1 loop /snap/amazon-ssm-agent/2012 loop4 7:4 0 96.6M 1 loop /snap/core/9804","title":"Example:"},{"location":"EBS/#to-detach-an-ebs-volume-using-the-command-line","text":"After unmounting the volume, you can use one of the following commands to detach it. For more information about these command line interfaces, see Accessing Amazon EC2 . detach-volume (AWS CLI) Dismount-EC2Volume (AWS Tools for Windows PowerShell)","title":"To detach an EBS volume using the command line"},{"location":"EBS/#deleting-an-amazon-ebs-volume","text":"After you no longer need an Amazon EBS volume, you can delete it. After deletion, its data is gone and the volume can\u2019t be attached to any instance. However, before deletion, you can store a snapshot of the volume, which you can use to re-create the volume later. /!\\ Important You can\u2019t delete a volume if it\u2019s attached to an instance. To delete a volume, you must first detach it. For more information, see Detaching an Amazon EBS volume from a Linux instance . You can check if a volume is attached to an instance. In the console, on the Volumes page , you can view the state of your volumes. If a volume is attached to an instance, it\u2019s in the in-use state. If a volume is detached from an instance, it\u2019s in the available state. You can delete this volume.","title":"Deleting an Amazon EBS volume"},{"location":"EBS/#to-delete-an-ebs-volume-using-the-console","text":"Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Volumes . Select a volume and choose Actions, Delete Volume . If Delete Volume is greyed out, the volume is attached to the instance. In the confirmation dialog box, choose Yes, Delete .","title":"To delete an EBS volume using the console"},{"location":"EBS/#to-delete-an-ebs-volume-using-the-command-line","text":"You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . delete-volume (AWS CLI) Remove-EC2Volume (AWS Tools for Windows PowerShell)","title":"To delete an EBS volume using the command line"},{"location":"EBS/#watch-it-here","text":"","title":"Watch it here"},{"location":"EBS/#create-attach-and-mount-a-new-ebs-volume","text":"","title":"Create, attach, and mount a new EBS volume"},{"location":"EBS/#detach-unmount-and-delet-an-existing-ebs-volume","text":"","title":"Detach, unmount, and delet an existing EBS volume"},{"location":"EBS/#references","text":"Viewing information about an Amazon EBS volume Replacing an Amazon EBS volume using a previous snapshot Monitoring the status of your volumes Detaching an Amazon EBS volume from a Linux instance Deleting an Amazon EBS volume","title":"References"},{"location":"EC2/","text":"Amazon Elastic Compute Cloud (EC2) Instances \u00b6 What is Amazon EC2? \u00b6 Amazon Elastic Compute Cloud (Amazon EC2) provides scalable computing capacity in the Amazon Web Services (AWS) cloud. Using Amazon EC2 eliminates your need to invest in hardware up front, so you can develop and deploy applications faster. You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage. Amazon EC2 enables you to scale up or down to handle changes in requirements or spikes in popularity, reducing your need to forecast traffic. If you would like to know more about Cloud Computing from AWS point of view, see What is Cloud Computing? How to get started with Amazon EC2 \u00b6 First, you need to get set up to use Amazon EC2. After you are set up, you are ready to complete the Getting Started tutorial for Amazon EC2. Whenever you need more information about an Amazon EC2 feature, you can read the technical documentation. You need to get familiar with the follwoing: Instances and AMIs Regions and Availability Zones Instance types Tags Setting up with Amazon EC2 \u00b6 Complete the tasks in this section to get set up for launching an Amazon EC2 instance for the first time: Sign up for AWS Create a key pair Create a security group Sign up for AWS \u00b6 Please follow the instructions in Setting Up an AWS Account . Create a key pair \u00b6 AWS uses public-key cryptography to secure the login information for your instance. A Linux instance has no password; you use a key pair to log in to your instance securely. You specify the name of the key pair when you launch your instance, then provide the private key when you log in using SSH. If you haven\u2019t created a key pair already, you can create one using the Amazon EC2 console. Note that if you plan to launch instances in multiple Regions, you\u2019ll need to create a key pair in each Region. For more information about Regions, see Regions, Availability Zones, and Local Zones . You can create a key pair using one of the following method: Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Key Pairs . Choose Create key pair . For Name , enter a descriptive name for the key pair. Amazon EC2 associates the public key with the name that you specify as the key name. A key name can include up to 255 ASCII characters. It can\u2019t include leading or trailing spaces. For File format, choose the format in which to save the private key. To save the private key in a format that can be used with OpenSSH, choose pem . To save the private key in a format that can be used with PuTTY, choose ppk . Choose Create key pair . The private key file is automatically downloaded by your browser. The base file name is the name you specified as the name of your key pair, and the file name extension is determined by the file format you chose. Save the private key file in a safe place. /!\\ Important This is the only chance for you to save the private key file. If you will use an SSH client on a macOS or Linux computer to connect to your Linux instance, use the following command to set the permissions of your private key file so that only you can read it. chmod 400 my-key-pair.pem If you do not set these permissions, then you cannot connect to your instance using this key pair. For more information, see Error: Unprotected private key file . Watch it here \u00b6 Create a security group \u00b6 Security groups act as a firewall for associated instances, controlling both inbound and outbound traffic at the instance level. You must add rules to a security group that enable you to connect to your instance from your IP address using SSH. You can also add rules that allow inbound and outbound HTTP and HTTPS access from anywhere. Note that if you plan to launch instances in multiple Regions, you\u2019ll need to create a security group in each Region. For more information about Regions, see Regions, Availability Zones, and Local Zones . Prerequisites \u00b6 You\u2019ll need the public IPv4 address of your local computer. The security group editor in the Amazon EC2 console can automatically detect the public IPv4 address for you. Alternatively, you can use the search phrase \u201cwhat is my IP address\u201d in an Internet browser, or use the following service: Check IP . If you are connecting through an Internet service provider (ISP) or from behind a firewall without a static IP address, you need to find out the range of IP addresses used by client computers. To create a security group with least privilege Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, select a Region for the security group. Security groups are specific to a Region, so you should select the same Region in which you created your key pair. In the navigation pane, choose Security Groups . Choose Create security group . In the Basic details section, do the following: a. Enter a name for the new security group and a description. Use a name that is easy for you to remember, such as your user name, followed by SG , plus the Region name. For example, me_SG_uswest2. b. In the VPC list, select your default VPC for the Region. In the Inbound rules section, create the following rules (choose Add rule for each new rule): Choose HTTP from the Type list, and make sure that Source is set to Anywhere ( 0.0.0.0/0 ) . Choose HTTPS from the Type list, and make sure that Source is set to Anywhere ( 0.0.0.0/0 ) . Choose SSH from the Type list. In the Source box, choose My IP to automatically populate the field with the public IPv4 address of your local computer. Alternatively, choose Custom and specify the public IPv4 address of your computer or network in CIDR notation. To specify an individual IP address in CIDR notation, add the routing suffix /32 , for example, 203.0.113.25/32 . If your company allocates addresses from a range, specify the entire range, such as 203.0.113.0/24 . /!\\ Warning For security reasons, we don't recommend that you allow SSH access from all IPv4 addresses (0.0.0.0/0) to your instance, except for testing purposes and only for a short time. Choose Create security group . For more information, see Amazon EC2 security groups for Linux instances . Getting started with Amazon EC2 Linux instances \u00b6 When you sign up for AWS, you can get started with Amazon EC2 using the AWS Free Tier . If you created your AWS account less than 12 months ago, and have not already exceeded the free tier benefits for Amazon EC2, it will not cost you anything to complete this tutorial, because we help you select options that are within the free tier benefits. Otherwise, you\u2019ll incur the standard Amazon EC2 usage fees from the time that you launch the instance until you terminate the instance (which is the final task of this tutorial), even if it remains idle. The instance is an Amazon EBS-backed instance (meaning that the root volume is an EBS (Elastic Block Store) volume). You can either specify the Availability Zone in which your instance runs, or let Amazon EC2 select an Availability Zone for you. When you launch your instance, you secure it by specifying a key pair and security group. When you connect to your instance, you must specify the private key of the key pair that you specified when launching your instance. In ordere to implement the previous configuration, you should proceeed with the following: Launch an instance Connect to your instance Clean up your instance Terminate your instance Next Steps Launch an instance \u00b6 You can launch a Linux instance using the AWS Management Console as described in the following procedure. This tutorial is intended to help you launch your first instance quickly, so it doesn\u2019t cover all possible options. For more information about the advanced options, see Launching an Instance . To launch an instance Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the console dashboard, choose Launch Instance . The Choose an Amazon Machine Image (AMI) page displays a list of basic configurations, called Amazon Machine Images (AMIs), that serve as templates for your instance. Select an HVM version of Amazon Linux 2. Notice that these AMIs are marked \u201cFree tier eligible.\u201d On the Choose an Instance Type page, you can select the hardware configuration of your instance. Select the t2.micro instance type, which is selected by default. The t2.micro instance type is eligible for the free tier. In Regions where t2.micro is unavailable, you can use a t3.micro instance under the free tier. For more information, see AWS Free Tier . Choose Review and Launch to let the wizard complete the other configuration settings for you. On the Review Instance Launch page, under Security Groups , you\u2019ll see that the wizard created and selected a security group for you. You can use this security group, or alternatively you can select the security group that you created when getting set up using the following steps: a. Choose Edit security groups . b. On the Configure Security Group page, ensure that Select an existing security group is selected. c. Select your security group from the list of existing security groups, and then choose Review and Launch . On the Review Instance Launch page, choose Launch . When prompted for a key pair, select Choose an existing key pair , then select the key pair that you created when getting set up. /!\\ Warning Don't select 'Proceed without a key pair'. If you launch your instance without a key pair, then you 'cannot' connect to it. When you are ready, select the acknowledgement check box, and then choose Launch Instances . A confirmation page lets you know that your instance is launching. Choose View Instances to close the confirmation page and return to the console. On the Instances screen, you can view the status of the launch. It takes a short time for an instance to launch. When you launch an instance, its initial state is pending . After the instance starts, its state changes to running and it receives a public DNS name. (If the Public DNS (IPv4) column is hidden, choose Show/Hide Columns (the gear-shaped icon) in the top right corner of the page and then select Public DNS (IPv4) .) It can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks; you can view this information in the Status Checks column. Connect to your instance \u00b6 There are several ways to connect to your Linux instance. For more information, see Connect to your Linux instance . /!\\ Important You can\u2019t connect to your instance unless you launched it with a key pair for which you have the .pem file and you launched it with a security group that allows SSH access from your computer. If you can\u2019t connect to your instance, see Troubleshooting connecting to your instance for assistance. Clean up your instance \u00b6 After you\u2019ve finished with the instance that you created for this tutorial, you should clean up by terminating the instance. If you want to do more with this instance before you clean up, see Next steps . /!\\ Important Terminating an instance effectively deletes it; you can\u2019t reconnect to an instance after you\u2019ve terminated it. Terminate your instance \u00b6 If you launched an instance that is not within the AWS Free Tier , you\u2019ll stop incurring charges for that instance as soon as the instance status changes to shutting down or terminated . If you\u2019d like to keep your instance for later, but not incur charges, you can stop the instance now and then start it again later. For more information, see Stopping Instances . To terminate your instance In the navigation pane, choose Instances . In the list of instances, select the instance. Choose Actions, Instance State, Terminate . Choose Yes, Terminate when prompted for confirmation. Amazon EC2 shuts down and terminates your instance. After your instance is terminated, it remains visible on the console for a short while, and then the entry is deleted. Next Steps \u00b6 After you start your instance, you might want to try some of the following exercises: Learn how to remotely manage your EC2 instance using Run Command. For more information, see AWS Systems Manager Run Command in the AWS Systems Manager User Guide. Configure a CloudWatch alarm to notify you if your usage exceeds the Free Tier. For more information, see Create a Billing Alarm in the AWS Billing and Cost Management User Guide. Watch it here \u00b6 Connecting to your Linux EC2 Instances \u00b6 Connect to the Linux instances that you launched and transfer files between your local computer and your instance. The operating system of your local computer determines the options that you have to connect from your local computer to your Linux instance. Connection options \u00b6 If your local computer operating system is Linux or macOS X , you can connect by using one pf the following: SSH Client EC2 Instance Connect AWS Systems Manager Session Manager If your local computer operating system is Windows , you can connect by using one pf the following: PuTTY SSH Client AWS Systems Manager Session Manager Windows Subsystem for Linux Connecting to your Linux instance using SSH \u00b6 After you launch your instance, you can connect to it and use it the way that you\u2019d use a computer sitting in front of you. Prerequisites \u00b6 Before you connect to your Linux instance, complete the following prerequisites. Verify that the instance is ready After you launch an instance, it can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks. You can view this information in the Status Checks column on the Instances page. Verify the general prerequisites for connecting to your instance Check the General prerequisites for connecting to your instance . Install an SSH client on your local computer (either Linux or Windows) as needed Your local computer might have an SSH client installed by default. You can verify this by typing ssh at the command line. If your compute doesn\u2019t recognize the command, you can install an SSH client. Recent versions of Windows Server 2019 and Windows 10 - OpenSSH is included as an installable component. For information, see OpenSSH in Windows . Earlier versions of Windows - Download and install OpenSSH. For more information, see Win32-OpenSSH . Linux and macOS X - Download and install OpenSSH. For more information, see Linux-openssh . Connect to your Linux instance using an SSH client \u00b6 Use the following procedure to connect to your Linux instance using an SSH client. If you receive an error while attempting to connect to your instance, see Troubleshooting connecting to your instance . To connect to your instance using SSH In a terminal window, use the ssh command to connect to the instance. You specify the path and file name of the private key ( .pem ), the user name for your instance, and the public DNS name or IPv6 address for your instance. For more information about how to find the private key, the user name for your instance, and the DNS name or IPv6 address for an instance, see Locate the private key and Get information about your instance . To connect to your instance, use one of the following commands. a. (Public DNS) To connect using your instance\u2019s public DNS name, enter the following command. ssh -i /path/my-key-pair.pem my-instance-user-name@my-instance-public-dns-name b. (IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance\u2019s IPv6 address, enter the following command. ssh -i /path/my-key-pair.pem my-instance-user-name@my-instance-IPv6-address You see a response like the following: The authenticity of host 'ec2-198-51-100-1.compute-1.amazonaws.com (198-51-100-1)' can't be established. ECDSA key fingerprint is l4UB/neBad9tvkgJf1QZWxheQmR59WgrgzEimCG6kZY. Are you sure you want to continue connecting (yes/no)? Enter yes . You see a response like the following: Warning: Permanently added 'ec2-198-51-100-1.compute-1.amazonaws.com' (ECDSA) to the list of known hosts. Connecting to your Linux instance from Windows using PuTTY or MobaXterm \u00b6 After you launch your instance, you can connect to it and use it the way that you\u2019d use a computer sitting in front of you. The following instructions explain how to connect to your instance using PuTTY, and MobaXterm, free SSH client for Windows. If you receive an error while attempting to connect to your instance, see General prerequisites for connecting to your instance . Prerequisites \u00b6 Before you connect to your Linux instance using PuTTY, complete the following prerequisites. Verify that the instance is ready After you launch an instance, it can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks. You can view this information in the Status Checks column on the Instances page. Verify the general prerequisites for connecting to your instance Check the General prerequisites for connecting to your instance . Install PuTTY on your local computer Download and install PuTTY from the PuTTY download page . If you already have an older version of PuTTY installed, we recommend that you download the latest version. Be sure to install the entire suite. Or Install MobaXterm on your local computer Download and install MobaXterm from the MobaXterm download page . Convert your private key using PuTTYgen In case you do not have a .ppk , locate the private key ( .pem file) for the key pair that you specified when you launched the instance. Convert the .pem file to a .ppk file for use with PuTTY. For more information, follow the steps in the next subsection. Convert your private key using PuTTYgen \u00b6 PuTTY does not natively support the private key format for SSH keys. PuTTY provides a tool named PuTTYgen, which converts keys to the required format for PuTTY. You must convert your private key ( .pem file) into this format ( .ppk file) as follows in order to connect to your instance using PuTTY. To convert your private key From the Start menu, choose All Programs, PuTTY, PuTTYgen . Under Type of key to generate , choose RSA . If you\u2019re using an older version of PuTTYgen, choose SSH-2 RSA . Choose Load . By default, PuTTYgen displays only files with the extension .ppk . To locate your .pem file, choose the option to display files of all types. Select all file types Select your .pem file for the key pair that you specified when you launched your instance and choose Open . PuTTYgen displays a notice that the .pem file was successfully imported. Choose OK . To save the key in the format that PuTTY can use, choose Save private key . PuTTYgen displays a warning about saving the key without a passphrase. Choose Yes . /!\\ Note A passphrase on a private key is an extra layer of protection. Even if your private key is discovered, it can't be used without the passphrase. The downside to using a passphrase is that it makes automation harder because human intervention is needed to log on to an instance, or to copy files to an instance. Specify the same name for the key that you used for the key pair (for example, my-key-pair ) and choose Save . PuTTY automatically adds the .ppk file extension. Your private key is now in the correct format for use with PuTTY. You can now connect to your instance using PuTTY\u2019s SSH client. Connecting to your Linux instance \u00b6 Use the following procedure to connect to your Linux instance using PuTTY. You need the .ppk file that you created for your private key. For more information, see Convert your private key using PuTTYgen in the preceding section. If you receive an error while attempting to connect to your instance, see Troubleshooting Connecting to Your Instance . To connect to your instance using PuTTY Start PuTTY (from the Start menu, choose All Programs, PuTTY, PuTTY ). In the Category pane , choose Session and complete the following fields: a. In the Host Name box, do one of the following: (Public DNS) To connect using your instance\u2019s public DNS name, enter my-instance-user-name@my-instance-public-dns-name . (IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance\u2019s IPv6 address, enter my-instance-user-name@my-instance-IPv6-address . For information about how to get the user name for your instance, and the public DNS name or IPv6 address of your instance, see Get information about your instance . b. Ensure that the Port value is 22. c. Under Connection type , select SSH . (Optional) You can configure PuTTY to automatically send \u2018keepalive\u2019 data at regular intervals to keep the session active. This is useful to avoid disconnecting from your instance due to session inactivity. In the Category pane, choose Connection , and then enter the required interval in the Seconds between keepalives field. For example, if your session disconnects after 10 minutes of inactivity, enter 180 to configure PuTTY to send keepalive data every 3 minutes. In the Category pane, expand Connection , expand SSH , and then choose Auth . Complete the following: a. Choose Browse . b. Select the .ppk file that you generated for your key pair and choose Open . c. (Optional) If you plan to start this session again later, you can save the session information for future use. Under Category , choose Session , enter a name for the session in Saved Sessions , and then choose Save . d. Choose Open . If this is the first time you have connected to this instance, PuTTY displays a security alert dialog box that asks whether you trust the host to which you are connecting. a. Choose Yes . A window opens and you are connected to your instance. /!\\ Note If you specified a passphrase when you converted your private key to PuTTY\u2019s format, you must provide that passphrase when you log in to the instance. If you receive an error while attempting to connect to your instance, see Troubleshooting Connecting to Your Instance . Transferring files to Linux instances \u00b6 Transferring files to your Linux instances depends on the type of the operating system you use to connect to the instance . Therfore: If you connect through Linux Two ways to transfer files between your local computer and a Linux instance are to use: The secure copy protocol (SCP) . FileZilla . If you connect through Windwos Many options are exist to transfer files between the instances and local machines, such as: The PuTTY Secure Copy client (PSCP) . WinSCP . FileZilla . Transferring files to Linux instances from Linux using SCP \u00b6 One way to transfer files between your local computer and a Linux instance is to use the secure copy protocol (SCP). This section describes how to transfer files with SCP. The procedure is similar to the procedure for connecting to an instance with SSH. Prerequisites \u00b6 Verify the general prerequisites for transferring files to your instance. The general prerequisites for transferring files to an instance are the same as the general prerequisites for connecting to an instance. For more information, see General prerequisites for connecting to your instance . Install an SCP client Most Linux, Unix, and Apple computers include an SCP client by default. If yours doesn\u2019t, the OpenSSH project provides a free implementation of the full suite of SSH tools, including an SCP client. For more information, see http://www.openssh.org . Use SCP to transfer a file \u00b6 Transfer a file to your instance using the instance\u2019s public DNS name, or the IPv6 address if your instance has one. For example , if the name of your private key file is my-key-pair , the file to transfer is SampleFile.txt , the user name for your instance is my-instance-user-name , and the public DNS name of the instance is my-instance-public-dns-name , or my-instance-IPv6-address if your instance has an IPv6 address, use one of the following commands to copy the file to the my-instance-user-name home directory. (Public DNS) To transfer a file to your instance using your instance\u2019s public DNS name, enter the following command. scp -i /path/my-key-pair.pem /path/SampleFile.txt my-instance-user-name@my-instance-public-dns-name:~ (IPv6) Alternatively, if your instance has an IPv6 address, to transfer a file using the instance\u2019s IPv6 address, enter the following command. The IPv6 address must be enclosed in square brackets ([ ]), which must be escaped (). scp -i /path/my-key-pair.pem /path/SampleFile.txt my-instance-user-name@\\[my-instance-IPv6-address\\]:~ You see a response like the following: The authenticity of host 'ec2-198-51-100-1.compute-1.amazonaws.com (10.254.142.33)' can't be established. RSA key fingerprint is 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f. Are you sure you want to continue connecting (yes/no)? Enter yes You see a response like the following: Warning: Permanently added 'ec2-198-51-100-1.compute-1.amazonaws.com' (RSA) to the list of known hosts. Sending file modes: C0644 20 SampleFile.txt Sink: C0644 20 SampleFile.txt SampleFile.txt 100% 20 0.0KB/s 00:00 If you receive a \u201cbash: scp: command not found\u201d error, you must first install scp on your Linux instance. For some operating systems, this is located in the openssh-clients package. For Amazon Linux variants, such as the Amazon ECS-optimized AMI, use the following command to install scp : [ec2-user ~]$ sudo yum install -y openssh-clients To transfer files in the other direction (from your Amazon EC2 instance to your local computer), reverse the order of the host parameters. For example, to transfer the SampleFile.txt file from your EC2 instance back to the home directory on your local computer as SampleFile2.txt , use of the following commands on your local computer. (Public DNS) To transfer a file to your instance using your instance\u2019s public DNS name, enter the following command. scp -i /path/my-key-pair.pem my-instance-user-name@my-instance-public-dns-name:~/SampleFile.txt ~/SampleFile2.txt (IPv6) Alternatively, if your instance has an IPv6 address, to transfer a file using the instance\u2019s IPv6 address, enter the following command. The IPv6 address must be enclosed in square brackets ([ ]), which must be escaped (). scp -i /path/my-key-pair.pem my-instance-user-name@\\[my-instance-IPv6-address\\]:~/SampleFile.txt ~/SampleFile2.txt Transferring files to your Linux instance using the PuTTY Secure Copy client \u00b6 The PuTTY Secure Copy client (PSCP) is a command line tool that you can use to transfer files between your Windows computer and your Linux instance. If you prefer a graphical user interface (GUI), you can use an open source GUI tool named WinSCP. For more information, see Transferring files to your Linux instance using WinSCP or FileZilla . To use PSCP, you need the private key you generated in Convert your private key using PuTTYgen . You also need the public DNS name of your Linux instance, or the IPv6 address if your instance has one. The following example transfers the file Sample_file.txt from the C:\\ drive on a Windows computer to the my-instance-user-name home directory on an Amazon Linux instance. To transfer a file, use one of the following commands. (Public DNS) To transfer a file using your instance\u2019s public DNS name, enter the following command. pscp -i C:\\path\\my-key-pair.ppk C:\\path\\Sample_file.txt my-instance-user-name@my-instance-public-dns-name:/home/my-instance-user-name/Sample_file.txt (IPv6) Alternatively, if your instance has an IPv6 address, to transfer a file using your instance\u2019s IPv6 address, enter the following command. The IPv6 address must be enclosed in square brackets ([ ]). pscp -i C:\\path\\my-key-pair.ppk C:\\path\\Sample_file.txt my-instance-user-name@[my-instance-IPv6-address]:/home/my-instance-user-name/Sample_file.txt Transferring files to your Linux instance using WinSCP \u00b6 WinSCP is a GUI-based file manager for Windows that allows you to upload and transfer files to a remote computer using the SFTP, SCP, FTP, and FTPS protocols. WinSCP allows you to drag and drop files from your Windows computer to your Linux instance or synchronize entire directory structures between the two systems. To use WinSCP, you need the private key that you generated in Convert your private key using PuTTYgen . You also need the public DNS name of your Linux instance. Prerequisites \u00b6 Download and install WinSCP from http://winscp.net/eng/download.php . For most users, the default installation options are OK. Start WinSCP. Configuration \u00b6 At the WinSCP login screen, for Host name , enter one of the following: (Public DNS or IPv4 address) To log in using your instance\u2019s public DNS name or public IPv4 address, enter the public DNS name or public IPv4 address for your instance. (IPv6) Alternatively, if your instance has an IPv6 address, to log in using your instance\u2019s IPv6 address, enter the IPv6 address for your instance. For User name, enter the default user name for your AMI. For Amazon Linux 2 or the Amazon Linux AMI , the user name is ec2-user . For a CentOS AMI , the user name is centos . For a Debian AMI , the user name is admin . For a Fedora AMI , the user name is ec2-user or fedora . For a RHEL AMI , the user name is ec2-user or root . For a SUSE AMI , the user name is ec2-user or root . For an Ubuntu AMI , the user name is ubuntu . Otherwise, if ec2-user and root don\u2019t work, check with the AMI provider. Specify the private key for your instance. For Private key , enter the path to your private key, or choose the \u201c \u2026 \u201d button to browse for the file. To open the advanced site settings, for newer versions of WinSCP, choose Advanced . To find the Private key file setting, under SSH , choose Authentication . Here is a screenshot from WinSCP version 5.9.4: WinSCP requires a PuTTY private key file (.ppk). You can convert a .pem security key file to the .ppk format using PuTTYgen. For more information, see (Convert your private key using PuTTYgen)[#convert-your-private-key-using-puttygen]. Connect and start transfering files \u00b6 Choose Login . To add the host fingerprint to the host cache, choose Yes . After the connection is established, in the connection window your Linux instance is on the right and your local machine is on the left. You can drag and drop files directly into the remote file system from your local machine. For more information on WinSCP, see the project documentation at http://winscp.net/eng/docs/start . If you receive a \u201cCannot execute SCP to start transfer\u201d error, you must first install scp on your Linux instance. For some operating systems, this is located in the openssh-clients package. For Amazon Linux variants, such as the Amazon ECS-optimized AMI, use the following command to install scp . [ec2-user ~]$ sudo yum install -y openssh-clients Watch it here \u00b6 Transferring files to your Linux instance using FileZilla \u00b6 FileZilla is a free software, cross-platform FTP application, consisting of FileZilla Client and FileZilla Server. Client binaries are available for Windows, Linux, and macOS, server binaries are available for Windows only. Both server and client support FTP and FTPS (FTP over SSL/TLS), while the client can in addition connect to SFTP servers. To use FileZilla, you need the private key that you generated in Convert your private key using PuTTYgen . You also need the public DNS name of your Linux instance. Prerequisites \u00b6 Download and install FileZilla from https://filezilla-project.org/download.php for Windows or Linux (Choose your flavor). For most users, the default installation options are OK. Start FileZilla. Configuration \u00b6 Edit (Preferences) > Settings > Connection > SFTP, Click Add key file Browse to the location of your .pem file and select it. A message box will appear asking your permission to convert the file into .ppk format. Click Yes , then give the file a name and store it somewhere. If you already convert the key by PuTTYgen , just browse the .ppk instead. If the new file is shown in the list of Keyfiles , then continue to the next step. If not, then click Add keyfile\u2026 and select the converted file. From File menu choose Site Manager , and choose Add a new site At the FileZilla Site Manager screen, for Host name , enter one of the following: (Public DNS or IPv4 address) To log in using your instance\u2019s public DNS name or public IPv4 address, enter the public DNS name or public IPv4 address for your instance. (IPv6) Alternatively, if your instance has an IPv6 address, to log in using your instance\u2019s IPv6 address, enter the IPv6 address for your instance. For the Protocol choose SFTP For the Login Type choose Normal For User name, enter the default user name for your AMI. For Amazon Linux 2 or the Amazon Linux AMI , the user name is ec2-user . For a CentOS AMI , the user name is centos . For a Debian AMI , the user name is admin . For a Fedora AMI , the user name is ec2-user or fedora . For a RHEL AMI , the user name is ec2-user or root . For a SUSE AMI , the user name is ec2-user or root . For an Ubuntu AMI , the user name is ubuntu . Otherwise, if ec2-user and root don\u2019t work, check with the AMI provider. Here is a screenshot from FileZilla version 3.49.1: Connect and start transfering files \u00b6 Choose Connect . To add the host fingerprint to the Site Manager . After the connection is established, in the connection window your Linux instance is on the right and your local machine is on the left. You can drag and drop files directly into the remote file system from your local machine. For more information on FileZilla, see the project documentation at https://wiki.filezilla-project.org/Documentation . If you receive a \u201cCannot execute SCP to start transfer\u201d error, you must first install scp on your Linux instance. For some operating systems, this is located in the openssh-clients package. For Amazon Linux variants, such as the Amazon ECS-optimized AMI, use the following command to install scp . [ec2-user ~]$ sudo yum install -y openssh-clients Watch it here \u00b6 Getting started with Amazon EC2 Windows Instances \u00b6 To get started with a Windows instance, see Getting started with Amazon EC2 Windows instances . Connecting to your Windows instance \u00b6 To connect to a Windows instance, see Connecting to Your Windows Instance in the Amazon EC2 User Guide for Windows Instances. Transfer files to Windows instances \u00b6 To transfer files to and from a Windows instance, see Transfer files to Windows instances in the Amazon EC2 User Guide for Windows Instances.","title":"Using EC2 Compute Instances"},{"location":"EC2/#amazon-elastic-compute-cloud-ec2-instances","text":"","title":"Amazon Elastic Compute Cloud (EC2) Instances"},{"location":"EC2/#what-is-amazon-ec2","text":"Amazon Elastic Compute Cloud (Amazon EC2) provides scalable computing capacity in the Amazon Web Services (AWS) cloud. Using Amazon EC2 eliminates your need to invest in hardware up front, so you can develop and deploy applications faster. You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage. Amazon EC2 enables you to scale up or down to handle changes in requirements or spikes in popularity, reducing your need to forecast traffic. If you would like to know more about Cloud Computing from AWS point of view, see What is Cloud Computing?","title":"What is Amazon EC2?"},{"location":"EC2/#how-to-get-started-with-amazon-ec2","text":"First, you need to get set up to use Amazon EC2. After you are set up, you are ready to complete the Getting Started tutorial for Amazon EC2. Whenever you need more information about an Amazon EC2 feature, you can read the technical documentation. You need to get familiar with the follwoing: Instances and AMIs Regions and Availability Zones Instance types Tags","title":"How to get started with Amazon EC2"},{"location":"EC2/#setting-up-with-amazon-ec2","text":"Complete the tasks in this section to get set up for launching an Amazon EC2 instance for the first time: Sign up for AWS Create a key pair Create a security group","title":"Setting up with Amazon EC2"},{"location":"EC2/#sign-up-for-aws","text":"Please follow the instructions in Setting Up an AWS Account .","title":"Sign up for AWS"},{"location":"EC2/#create-a-key-pair","text":"AWS uses public-key cryptography to secure the login information for your instance. A Linux instance has no password; you use a key pair to log in to your instance securely. You specify the name of the key pair when you launch your instance, then provide the private key when you log in using SSH. If you haven\u2019t created a key pair already, you can create one using the Amazon EC2 console. Note that if you plan to launch instances in multiple Regions, you\u2019ll need to create a key pair in each Region. For more information about Regions, see Regions, Availability Zones, and Local Zones . You can create a key pair using one of the following method: Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Key Pairs . Choose Create key pair . For Name , enter a descriptive name for the key pair. Amazon EC2 associates the public key with the name that you specify as the key name. A key name can include up to 255 ASCII characters. It can\u2019t include leading or trailing spaces. For File format, choose the format in which to save the private key. To save the private key in a format that can be used with OpenSSH, choose pem . To save the private key in a format that can be used with PuTTY, choose ppk . Choose Create key pair . The private key file is automatically downloaded by your browser. The base file name is the name you specified as the name of your key pair, and the file name extension is determined by the file format you chose. Save the private key file in a safe place. /!\\ Important This is the only chance for you to save the private key file. If you will use an SSH client on a macOS or Linux computer to connect to your Linux instance, use the following command to set the permissions of your private key file so that only you can read it. chmod 400 my-key-pair.pem If you do not set these permissions, then you cannot connect to your instance using this key pair. For more information, see Error: Unprotected private key file .","title":"Create a key pair"},{"location":"EC2/#watch-it-here","text":"","title":"Watch it here"},{"location":"EC2/#create-a-security-group","text":"Security groups act as a firewall for associated instances, controlling both inbound and outbound traffic at the instance level. You must add rules to a security group that enable you to connect to your instance from your IP address using SSH. You can also add rules that allow inbound and outbound HTTP and HTTPS access from anywhere. Note that if you plan to launch instances in multiple Regions, you\u2019ll need to create a security group in each Region. For more information about Regions, see Regions, Availability Zones, and Local Zones .","title":"Create a security group"},{"location":"EC2/#prerequisites","text":"You\u2019ll need the public IPv4 address of your local computer. The security group editor in the Amazon EC2 console can automatically detect the public IPv4 address for you. Alternatively, you can use the search phrase \u201cwhat is my IP address\u201d in an Internet browser, or use the following service: Check IP . If you are connecting through an Internet service provider (ISP) or from behind a firewall without a static IP address, you need to find out the range of IP addresses used by client computers. To create a security group with least privilege Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the navigation bar, select a Region for the security group. Security groups are specific to a Region, so you should select the same Region in which you created your key pair. In the navigation pane, choose Security Groups . Choose Create security group . In the Basic details section, do the following: a. Enter a name for the new security group and a description. Use a name that is easy for you to remember, such as your user name, followed by SG , plus the Region name. For example, me_SG_uswest2. b. In the VPC list, select your default VPC for the Region. In the Inbound rules section, create the following rules (choose Add rule for each new rule): Choose HTTP from the Type list, and make sure that Source is set to Anywhere ( 0.0.0.0/0 ) . Choose HTTPS from the Type list, and make sure that Source is set to Anywhere ( 0.0.0.0/0 ) . Choose SSH from the Type list. In the Source box, choose My IP to automatically populate the field with the public IPv4 address of your local computer. Alternatively, choose Custom and specify the public IPv4 address of your computer or network in CIDR notation. To specify an individual IP address in CIDR notation, add the routing suffix /32 , for example, 203.0.113.25/32 . If your company allocates addresses from a range, specify the entire range, such as 203.0.113.0/24 . /!\\ Warning For security reasons, we don't recommend that you allow SSH access from all IPv4 addresses (0.0.0.0/0) to your instance, except for testing purposes and only for a short time. Choose Create security group . For more information, see Amazon EC2 security groups for Linux instances .","title":"Prerequisites"},{"location":"EC2/#getting-started-with-amazon-ec2-linux-instances","text":"When you sign up for AWS, you can get started with Amazon EC2 using the AWS Free Tier . If you created your AWS account less than 12 months ago, and have not already exceeded the free tier benefits for Amazon EC2, it will not cost you anything to complete this tutorial, because we help you select options that are within the free tier benefits. Otherwise, you\u2019ll incur the standard Amazon EC2 usage fees from the time that you launch the instance until you terminate the instance (which is the final task of this tutorial), even if it remains idle. The instance is an Amazon EBS-backed instance (meaning that the root volume is an EBS (Elastic Block Store) volume). You can either specify the Availability Zone in which your instance runs, or let Amazon EC2 select an Availability Zone for you. When you launch your instance, you secure it by specifying a key pair and security group. When you connect to your instance, you must specify the private key of the key pair that you specified when launching your instance. In ordere to implement the previous configuration, you should proceeed with the following: Launch an instance Connect to your instance Clean up your instance Terminate your instance Next Steps","title":"Getting started with Amazon EC2 Linux instances"},{"location":"EC2/#launch-an-instance","text":"You can launch a Linux instance using the AWS Management Console as described in the following procedure. This tutorial is intended to help you launch your first instance quickly, so it doesn\u2019t cover all possible options. For more information about the advanced options, see Launching an Instance . To launch an instance Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . From the console dashboard, choose Launch Instance . The Choose an Amazon Machine Image (AMI) page displays a list of basic configurations, called Amazon Machine Images (AMIs), that serve as templates for your instance. Select an HVM version of Amazon Linux 2. Notice that these AMIs are marked \u201cFree tier eligible.\u201d On the Choose an Instance Type page, you can select the hardware configuration of your instance. Select the t2.micro instance type, which is selected by default. The t2.micro instance type is eligible for the free tier. In Regions where t2.micro is unavailable, you can use a t3.micro instance under the free tier. For more information, see AWS Free Tier . Choose Review and Launch to let the wizard complete the other configuration settings for you. On the Review Instance Launch page, under Security Groups , you\u2019ll see that the wizard created and selected a security group for you. You can use this security group, or alternatively you can select the security group that you created when getting set up using the following steps: a. Choose Edit security groups . b. On the Configure Security Group page, ensure that Select an existing security group is selected. c. Select your security group from the list of existing security groups, and then choose Review and Launch . On the Review Instance Launch page, choose Launch . When prompted for a key pair, select Choose an existing key pair , then select the key pair that you created when getting set up. /!\\ Warning Don't select 'Proceed without a key pair'. If you launch your instance without a key pair, then you 'cannot' connect to it. When you are ready, select the acknowledgement check box, and then choose Launch Instances . A confirmation page lets you know that your instance is launching. Choose View Instances to close the confirmation page and return to the console. On the Instances screen, you can view the status of the launch. It takes a short time for an instance to launch. When you launch an instance, its initial state is pending . After the instance starts, its state changes to running and it receives a public DNS name. (If the Public DNS (IPv4) column is hidden, choose Show/Hide Columns (the gear-shaped icon) in the top right corner of the page and then select Public DNS (IPv4) .) It can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks; you can view this information in the Status Checks column.","title":"Launch an instance"},{"location":"EC2/#connect-to-your-instance","text":"There are several ways to connect to your Linux instance. For more information, see Connect to your Linux instance . /!\\ Important You can\u2019t connect to your instance unless you launched it with a key pair for which you have the .pem file and you launched it with a security group that allows SSH access from your computer. If you can\u2019t connect to your instance, see Troubleshooting connecting to your instance for assistance.","title":"Connect to your instance"},{"location":"EC2/#clean-up-your-instance","text":"After you\u2019ve finished with the instance that you created for this tutorial, you should clean up by terminating the instance. If you want to do more with this instance before you clean up, see Next steps . /!\\ Important Terminating an instance effectively deletes it; you can\u2019t reconnect to an instance after you\u2019ve terminated it.","title":"Clean up your instance"},{"location":"EC2/#terminate-your-instance","text":"If you launched an instance that is not within the AWS Free Tier , you\u2019ll stop incurring charges for that instance as soon as the instance status changes to shutting down or terminated . If you\u2019d like to keep your instance for later, but not incur charges, you can stop the instance now and then start it again later. For more information, see Stopping Instances . To terminate your instance In the navigation pane, choose Instances . In the list of instances, select the instance. Choose Actions, Instance State, Terminate . Choose Yes, Terminate when prompted for confirmation. Amazon EC2 shuts down and terminates your instance. After your instance is terminated, it remains visible on the console for a short while, and then the entry is deleted.","title":"Terminate your instance"},{"location":"EC2/#next-steps","text":"After you start your instance, you might want to try some of the following exercises: Learn how to remotely manage your EC2 instance using Run Command. For more information, see AWS Systems Manager Run Command in the AWS Systems Manager User Guide. Configure a CloudWatch alarm to notify you if your usage exceeds the Free Tier. For more information, see Create a Billing Alarm in the AWS Billing and Cost Management User Guide.","title":"Next Steps"},{"location":"EC2/#watch-it-here_1","text":"","title":"Watch it here"},{"location":"EC2/#connecting-to-your-linux-ec2-instances","text":"Connect to the Linux instances that you launched and transfer files between your local computer and your instance. The operating system of your local computer determines the options that you have to connect from your local computer to your Linux instance.","title":"Connecting to your Linux EC2 Instances"},{"location":"EC2/#connection-options","text":"If your local computer operating system is Linux or macOS X , you can connect by using one pf the following: SSH Client EC2 Instance Connect AWS Systems Manager Session Manager If your local computer operating system is Windows , you can connect by using one pf the following: PuTTY SSH Client AWS Systems Manager Session Manager Windows Subsystem for Linux","title":"Connection options"},{"location":"EC2/#connecting-to-your-linux-instance-using-ssh","text":"After you launch your instance, you can connect to it and use it the way that you\u2019d use a computer sitting in front of you.","title":"Connecting to your Linux instance using SSH"},{"location":"EC2/#prerequisites_1","text":"Before you connect to your Linux instance, complete the following prerequisites. Verify that the instance is ready After you launch an instance, it can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks. You can view this information in the Status Checks column on the Instances page. Verify the general prerequisites for connecting to your instance Check the General prerequisites for connecting to your instance . Install an SSH client on your local computer (either Linux or Windows) as needed Your local computer might have an SSH client installed by default. You can verify this by typing ssh at the command line. If your compute doesn\u2019t recognize the command, you can install an SSH client. Recent versions of Windows Server 2019 and Windows 10 - OpenSSH is included as an installable component. For information, see OpenSSH in Windows . Earlier versions of Windows - Download and install OpenSSH. For more information, see Win32-OpenSSH . Linux and macOS X - Download and install OpenSSH. For more information, see Linux-openssh .","title":"Prerequisites"},{"location":"EC2/#connect-to-your-linux-instance-using-an-ssh-client","text":"Use the following procedure to connect to your Linux instance using an SSH client. If you receive an error while attempting to connect to your instance, see Troubleshooting connecting to your instance . To connect to your instance using SSH In a terminal window, use the ssh command to connect to the instance. You specify the path and file name of the private key ( .pem ), the user name for your instance, and the public DNS name or IPv6 address for your instance. For more information about how to find the private key, the user name for your instance, and the DNS name or IPv6 address for an instance, see Locate the private key and Get information about your instance . To connect to your instance, use one of the following commands. a. (Public DNS) To connect using your instance\u2019s public DNS name, enter the following command. ssh -i /path/my-key-pair.pem my-instance-user-name@my-instance-public-dns-name b. (IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance\u2019s IPv6 address, enter the following command. ssh -i /path/my-key-pair.pem my-instance-user-name@my-instance-IPv6-address You see a response like the following: The authenticity of host 'ec2-198-51-100-1.compute-1.amazonaws.com (198-51-100-1)' can't be established. ECDSA key fingerprint is l4UB/neBad9tvkgJf1QZWxheQmR59WgrgzEimCG6kZY. Are you sure you want to continue connecting (yes/no)? Enter yes . You see a response like the following: Warning: Permanently added 'ec2-198-51-100-1.compute-1.amazonaws.com' (ECDSA) to the list of known hosts.","title":"Connect to your Linux instance using an SSH client"},{"location":"EC2/#connecting-to-your-linux-instance-from-windows-using-putty-or-mobaxterm","text":"After you launch your instance, you can connect to it and use it the way that you\u2019d use a computer sitting in front of you. The following instructions explain how to connect to your instance using PuTTY, and MobaXterm, free SSH client for Windows. If you receive an error while attempting to connect to your instance, see General prerequisites for connecting to your instance .","title":"Connecting to your Linux instance from Windows using PuTTY or MobaXterm"},{"location":"EC2/#prerequisites_2","text":"Before you connect to your Linux instance using PuTTY, complete the following prerequisites. Verify that the instance is ready After you launch an instance, it can take a few minutes for the instance to be ready so that you can connect to it. Check that your instance has passed its status checks. You can view this information in the Status Checks column on the Instances page. Verify the general prerequisites for connecting to your instance Check the General prerequisites for connecting to your instance . Install PuTTY on your local computer Download and install PuTTY from the PuTTY download page . If you already have an older version of PuTTY installed, we recommend that you download the latest version. Be sure to install the entire suite. Or Install MobaXterm on your local computer Download and install MobaXterm from the MobaXterm download page . Convert your private key using PuTTYgen In case you do not have a .ppk , locate the private key ( .pem file) for the key pair that you specified when you launched the instance. Convert the .pem file to a .ppk file for use with PuTTY. For more information, follow the steps in the next subsection.","title":"Prerequisites"},{"location":"EC2/#convert-your-private-key-using-puttygen","text":"PuTTY does not natively support the private key format for SSH keys. PuTTY provides a tool named PuTTYgen, which converts keys to the required format for PuTTY. You must convert your private key ( .pem file) into this format ( .ppk file) as follows in order to connect to your instance using PuTTY. To convert your private key From the Start menu, choose All Programs, PuTTY, PuTTYgen . Under Type of key to generate , choose RSA . If you\u2019re using an older version of PuTTYgen, choose SSH-2 RSA . Choose Load . By default, PuTTYgen displays only files with the extension .ppk . To locate your .pem file, choose the option to display files of all types. Select all file types Select your .pem file for the key pair that you specified when you launched your instance and choose Open . PuTTYgen displays a notice that the .pem file was successfully imported. Choose OK . To save the key in the format that PuTTY can use, choose Save private key . PuTTYgen displays a warning about saving the key without a passphrase. Choose Yes . /!\\ Note A passphrase on a private key is an extra layer of protection. Even if your private key is discovered, it can't be used without the passphrase. The downside to using a passphrase is that it makes automation harder because human intervention is needed to log on to an instance, or to copy files to an instance. Specify the same name for the key that you used for the key pair (for example, my-key-pair ) and choose Save . PuTTY automatically adds the .ppk file extension. Your private key is now in the correct format for use with PuTTY. You can now connect to your instance using PuTTY\u2019s SSH client.","title":"Convert your private key using PuTTYgen"},{"location":"EC2/#connecting-to-your-linux-instance","text":"Use the following procedure to connect to your Linux instance using PuTTY. You need the .ppk file that you created for your private key. For more information, see Convert your private key using PuTTYgen in the preceding section. If you receive an error while attempting to connect to your instance, see Troubleshooting Connecting to Your Instance . To connect to your instance using PuTTY Start PuTTY (from the Start menu, choose All Programs, PuTTY, PuTTY ). In the Category pane , choose Session and complete the following fields: a. In the Host Name box, do one of the following: (Public DNS) To connect using your instance\u2019s public DNS name, enter my-instance-user-name@my-instance-public-dns-name . (IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance\u2019s IPv6 address, enter my-instance-user-name@my-instance-IPv6-address . For information about how to get the user name for your instance, and the public DNS name or IPv6 address of your instance, see Get information about your instance . b. Ensure that the Port value is 22. c. Under Connection type , select SSH . (Optional) You can configure PuTTY to automatically send \u2018keepalive\u2019 data at regular intervals to keep the session active. This is useful to avoid disconnecting from your instance due to session inactivity. In the Category pane, choose Connection , and then enter the required interval in the Seconds between keepalives field. For example, if your session disconnects after 10 minutes of inactivity, enter 180 to configure PuTTY to send keepalive data every 3 minutes. In the Category pane, expand Connection , expand SSH , and then choose Auth . Complete the following: a. Choose Browse . b. Select the .ppk file that you generated for your key pair and choose Open . c. (Optional) If you plan to start this session again later, you can save the session information for future use. Under Category , choose Session , enter a name for the session in Saved Sessions , and then choose Save . d. Choose Open . If this is the first time you have connected to this instance, PuTTY displays a security alert dialog box that asks whether you trust the host to which you are connecting. a. Choose Yes . A window opens and you are connected to your instance. /!\\ Note If you specified a passphrase when you converted your private key to PuTTY\u2019s format, you must provide that passphrase when you log in to the instance. If you receive an error while attempting to connect to your instance, see Troubleshooting Connecting to Your Instance .","title":"Connecting to your Linux instance"},{"location":"EC2/#transferring-files-to-linux-instances","text":"Transferring files to your Linux instances depends on the type of the operating system you use to connect to the instance . Therfore: If you connect through Linux Two ways to transfer files between your local computer and a Linux instance are to use: The secure copy protocol (SCP) . FileZilla . If you connect through Windwos Many options are exist to transfer files between the instances and local machines, such as: The PuTTY Secure Copy client (PSCP) . WinSCP . FileZilla .","title":"Transferring files to Linux instances"},{"location":"EC2/#transferring-files-to-linux-instances-from-linux-using-scp","text":"One way to transfer files between your local computer and a Linux instance is to use the secure copy protocol (SCP). This section describes how to transfer files with SCP. The procedure is similar to the procedure for connecting to an instance with SSH.","title":"Transferring files to Linux instances from Linux using SCP"},{"location":"EC2/#prerequisites_3","text":"Verify the general prerequisites for transferring files to your instance. The general prerequisites for transferring files to an instance are the same as the general prerequisites for connecting to an instance. For more information, see General prerequisites for connecting to your instance . Install an SCP client Most Linux, Unix, and Apple computers include an SCP client by default. If yours doesn\u2019t, the OpenSSH project provides a free implementation of the full suite of SSH tools, including an SCP client. For more information, see http://www.openssh.org .","title":"Prerequisites"},{"location":"EC2/#use-scp-to-transfer-a-file","text":"Transfer a file to your instance using the instance\u2019s public DNS name, or the IPv6 address if your instance has one. For example , if the name of your private key file is my-key-pair , the file to transfer is SampleFile.txt , the user name for your instance is my-instance-user-name , and the public DNS name of the instance is my-instance-public-dns-name , or my-instance-IPv6-address if your instance has an IPv6 address, use one of the following commands to copy the file to the my-instance-user-name home directory. (Public DNS) To transfer a file to your instance using your instance\u2019s public DNS name, enter the following command. scp -i /path/my-key-pair.pem /path/SampleFile.txt my-instance-user-name@my-instance-public-dns-name:~ (IPv6) Alternatively, if your instance has an IPv6 address, to transfer a file using the instance\u2019s IPv6 address, enter the following command. The IPv6 address must be enclosed in square brackets ([ ]), which must be escaped (). scp -i /path/my-key-pair.pem /path/SampleFile.txt my-instance-user-name@\\[my-instance-IPv6-address\\]:~ You see a response like the following: The authenticity of host 'ec2-198-51-100-1.compute-1.amazonaws.com (10.254.142.33)' can't be established. RSA key fingerprint is 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f. Are you sure you want to continue connecting (yes/no)? Enter yes You see a response like the following: Warning: Permanently added 'ec2-198-51-100-1.compute-1.amazonaws.com' (RSA) to the list of known hosts. Sending file modes: C0644 20 SampleFile.txt Sink: C0644 20 SampleFile.txt SampleFile.txt 100% 20 0.0KB/s 00:00 If you receive a \u201cbash: scp: command not found\u201d error, you must first install scp on your Linux instance. For some operating systems, this is located in the openssh-clients package. For Amazon Linux variants, such as the Amazon ECS-optimized AMI, use the following command to install scp : [ec2-user ~]$ sudo yum install -y openssh-clients To transfer files in the other direction (from your Amazon EC2 instance to your local computer), reverse the order of the host parameters. For example, to transfer the SampleFile.txt file from your EC2 instance back to the home directory on your local computer as SampleFile2.txt , use of the following commands on your local computer. (Public DNS) To transfer a file to your instance using your instance\u2019s public DNS name, enter the following command. scp -i /path/my-key-pair.pem my-instance-user-name@my-instance-public-dns-name:~/SampleFile.txt ~/SampleFile2.txt (IPv6) Alternatively, if your instance has an IPv6 address, to transfer a file using the instance\u2019s IPv6 address, enter the following command. The IPv6 address must be enclosed in square brackets ([ ]), which must be escaped (). scp -i /path/my-key-pair.pem my-instance-user-name@\\[my-instance-IPv6-address\\]:~/SampleFile.txt ~/SampleFile2.txt","title":"Use SCP to transfer a file"},{"location":"EC2/#transferring-files-to-your-linux-instance-using-the-putty-secure-copy-client","text":"The PuTTY Secure Copy client (PSCP) is a command line tool that you can use to transfer files between your Windows computer and your Linux instance. If you prefer a graphical user interface (GUI), you can use an open source GUI tool named WinSCP. For more information, see Transferring files to your Linux instance using WinSCP or FileZilla . To use PSCP, you need the private key you generated in Convert your private key using PuTTYgen . You also need the public DNS name of your Linux instance, or the IPv6 address if your instance has one. The following example transfers the file Sample_file.txt from the C:\\ drive on a Windows computer to the my-instance-user-name home directory on an Amazon Linux instance. To transfer a file, use one of the following commands. (Public DNS) To transfer a file using your instance\u2019s public DNS name, enter the following command. pscp -i C:\\path\\my-key-pair.ppk C:\\path\\Sample_file.txt my-instance-user-name@my-instance-public-dns-name:/home/my-instance-user-name/Sample_file.txt (IPv6) Alternatively, if your instance has an IPv6 address, to transfer a file using your instance\u2019s IPv6 address, enter the following command. The IPv6 address must be enclosed in square brackets ([ ]). pscp -i C:\\path\\my-key-pair.ppk C:\\path\\Sample_file.txt my-instance-user-name@[my-instance-IPv6-address]:/home/my-instance-user-name/Sample_file.txt","title":"Transferring files to your Linux instance using the PuTTY Secure Copy client"},{"location":"EC2/#transferring-files-to-your-linux-instance-using-winscp","text":"WinSCP is a GUI-based file manager for Windows that allows you to upload and transfer files to a remote computer using the SFTP, SCP, FTP, and FTPS protocols. WinSCP allows you to drag and drop files from your Windows computer to your Linux instance or synchronize entire directory structures between the two systems. To use WinSCP, you need the private key that you generated in Convert your private key using PuTTYgen . You also need the public DNS name of your Linux instance.","title":"Transferring files to your Linux instance using WinSCP"},{"location":"EC2/#prerequisites_4","text":"Download and install WinSCP from http://winscp.net/eng/download.php . For most users, the default installation options are OK. Start WinSCP.","title":"Prerequisites"},{"location":"EC2/#configuration","text":"At the WinSCP login screen, for Host name , enter one of the following: (Public DNS or IPv4 address) To log in using your instance\u2019s public DNS name or public IPv4 address, enter the public DNS name or public IPv4 address for your instance. (IPv6) Alternatively, if your instance has an IPv6 address, to log in using your instance\u2019s IPv6 address, enter the IPv6 address for your instance. For User name, enter the default user name for your AMI. For Amazon Linux 2 or the Amazon Linux AMI , the user name is ec2-user . For a CentOS AMI , the user name is centos . For a Debian AMI , the user name is admin . For a Fedora AMI , the user name is ec2-user or fedora . For a RHEL AMI , the user name is ec2-user or root . For a SUSE AMI , the user name is ec2-user or root . For an Ubuntu AMI , the user name is ubuntu . Otherwise, if ec2-user and root don\u2019t work, check with the AMI provider. Specify the private key for your instance. For Private key , enter the path to your private key, or choose the \u201c \u2026 \u201d button to browse for the file. To open the advanced site settings, for newer versions of WinSCP, choose Advanced . To find the Private key file setting, under SSH , choose Authentication . Here is a screenshot from WinSCP version 5.9.4: WinSCP requires a PuTTY private key file (.ppk). You can convert a .pem security key file to the .ppk format using PuTTYgen. For more information, see (Convert your private key using PuTTYgen)[#convert-your-private-key-using-puttygen].","title":"Configuration"},{"location":"EC2/#connect-and-start-transfering-files","text":"Choose Login . To add the host fingerprint to the host cache, choose Yes . After the connection is established, in the connection window your Linux instance is on the right and your local machine is on the left. You can drag and drop files directly into the remote file system from your local machine. For more information on WinSCP, see the project documentation at http://winscp.net/eng/docs/start . If you receive a \u201cCannot execute SCP to start transfer\u201d error, you must first install scp on your Linux instance. For some operating systems, this is located in the openssh-clients package. For Amazon Linux variants, such as the Amazon ECS-optimized AMI, use the following command to install scp . [ec2-user ~]$ sudo yum install -y openssh-clients","title":"Connect and start transfering files"},{"location":"EC2/#watch-it-here_2","text":"","title":"Watch it here"},{"location":"EC2/#transferring-files-to-your-linux-instance-using-filezilla","text":"FileZilla is a free software, cross-platform FTP application, consisting of FileZilla Client and FileZilla Server. Client binaries are available for Windows, Linux, and macOS, server binaries are available for Windows only. Both server and client support FTP and FTPS (FTP over SSL/TLS), while the client can in addition connect to SFTP servers. To use FileZilla, you need the private key that you generated in Convert your private key using PuTTYgen . You also need the public DNS name of your Linux instance.","title":"Transferring files to your Linux instance using FileZilla"},{"location":"EC2/#prerequisites_5","text":"Download and install FileZilla from https://filezilla-project.org/download.php for Windows or Linux (Choose your flavor). For most users, the default installation options are OK. Start FileZilla.","title":"Prerequisites"},{"location":"EC2/#configuration_1","text":"Edit (Preferences) > Settings > Connection > SFTP, Click Add key file Browse to the location of your .pem file and select it. A message box will appear asking your permission to convert the file into .ppk format. Click Yes , then give the file a name and store it somewhere. If you already convert the key by PuTTYgen , just browse the .ppk instead. If the new file is shown in the list of Keyfiles , then continue to the next step. If not, then click Add keyfile\u2026 and select the converted file. From File menu choose Site Manager , and choose Add a new site At the FileZilla Site Manager screen, for Host name , enter one of the following: (Public DNS or IPv4 address) To log in using your instance\u2019s public DNS name or public IPv4 address, enter the public DNS name or public IPv4 address for your instance. (IPv6) Alternatively, if your instance has an IPv6 address, to log in using your instance\u2019s IPv6 address, enter the IPv6 address for your instance. For the Protocol choose SFTP For the Login Type choose Normal For User name, enter the default user name for your AMI. For Amazon Linux 2 or the Amazon Linux AMI , the user name is ec2-user . For a CentOS AMI , the user name is centos . For a Debian AMI , the user name is admin . For a Fedora AMI , the user name is ec2-user or fedora . For a RHEL AMI , the user name is ec2-user or root . For a SUSE AMI , the user name is ec2-user or root . For an Ubuntu AMI , the user name is ubuntu . Otherwise, if ec2-user and root don\u2019t work, check with the AMI provider. Here is a screenshot from FileZilla version 3.49.1:","title":"Configuration"},{"location":"EC2/#connect-and-start-transfering-files_1","text":"Choose Connect . To add the host fingerprint to the Site Manager . After the connection is established, in the connection window your Linux instance is on the right and your local machine is on the left. You can drag and drop files directly into the remote file system from your local machine. For more information on FileZilla, see the project documentation at https://wiki.filezilla-project.org/Documentation . If you receive a \u201cCannot execute SCP to start transfer\u201d error, you must first install scp on your Linux instance. For some operating systems, this is located in the openssh-clients package. For Amazon Linux variants, such as the Amazon ECS-optimized AMI, use the following command to install scp . [ec2-user ~]$ sudo yum install -y openssh-clients","title":"Connect and start transfering files"},{"location":"EC2/#watch-it-here_3","text":"","title":"Watch it here"},{"location":"EC2/#getting-started-with-amazon-ec2-windows-instances","text":"To get started with a Windows instance, see Getting started with Amazon EC2 Windows instances .","title":"Getting started with Amazon EC2 Windows Instances"},{"location":"EC2/#connecting-to-your-windows-instance","text":"To connect to a Windows instance, see Connecting to Your Windows Instance in the Amazon EC2 User Guide for Windows Instances.","title":"Connecting to your Windows instance"},{"location":"EC2/#transfer-files-to-windows-instances","text":"To transfer files to and from a Windows instance, see Transfer files to Windows instances in the Amazon EC2 User Guide for Windows Instances.","title":"Transfer files to Windows instances"},{"location":"EFS/","text":"Amazon EFS volumes \u00b6 Amazon Elastic File System (Amazon EFS) provides simple, scalable, elastic file storage for use with AWS Cloud services and on-premises resources. It is straightforward to use, and it offers a simple interface that allows you to create and configure file systems quickly and easily. Amazon EFS is designed to provide massively parallel shared access to thousands of Amazon EC2 instances . This enables your applications to achieve high levels of aggregate throughput and IOPS that scale as a file system grows, with consistent low latencies . When an Amazon EFS file system is mounted on Amazon EC2 instances, it provides a standard file system interface and file system access semantics, which allows you to seamlessly integrate Amazon EFS with your existing applications and tools. Multiple Amazon EC2 instances can access an Amazon EFS file system at the same time , thus allowing Amazon EFS to provide a common data source for workloads and applications that run on more than one Amazon EC2 instance. Current details on Amazon EFS can be found at: https://aws.amazon.com/efs/ . Amazon EFS features \u00b6 Amazon EFS is well suited to a broad range of use cases, from home directories to business-critical applications. Customers can use Amazon EFS to move NFS-based file storage workloads to managed file systems on the AWS Cloud. Other use cases include: analytics, web serving and content management, application development and testing, media and entertainment workflows, database backups, and containers and serverless storage. EFS has many features , such as: Highly available and durable Storage classes and lifecycle management Security and compliance Scalable performance Elastic and scalable Encryption Fully managed Fully Managed feature \u00b6 Amazon EFS is a fully managed service providing NFS shared file system storage for Linux workloads. Amazon EFS makes it simple to create and configure file systems. You don\u2019t have to worry about managing file servers or storage, updating hardware, configuring software, or performing backups. In seconds, you can create a fully managed file system by using the AWS Management Console, the AWS CLI, or an AWS SDK. EFS modes and services \u00b6 EFS has many modes, such as: Performance modes Throughput modes Containers and serverless file storage Data transfer and backup hared file system with NFS v4.0 and v4.1 support Please check EFS pricing, https://aws.amazon.com/efs/pricing/ before start working with it. Amazon EBS vs. EFS volumes \u00b6 Amazon EFS, and Amazon EBS are AWS\u2019 two different block-storage types that can be applicable for different types of workload needs. Let\u2019s take a closer look at the key features of each option, as well as the similarities and differences , see Amazon EFS FAQs Similarities and Differences \u00b6 Amazon EBS delivers high-availability block-level storage volumes for Amazon Elastic Compute Cloud (EC2) instances. It stores data on a file system which is retained after the EC2 instance is shut down. Amazon EFS offers scalable file storage, also optimized for EC2. It can be used as a common data source for any application or workload that runs on numerous instances. Using an EFS file system, you may configure instances to mount the file system. The main differences between EBS and EFS is that EBS is only accessible from a single EC2 instance in your particular AWS region, while EFS allows you to mount the file system across multiple regions and instances . So how can you choose between Amazon EBS vs EFS? That depends on what benefits you\u2019re looking for, and your use case for your workload. Let\u2019s take an in-depth look at each one to understand their benefits and use cases. EBS and EFS Use Cases \u00b6 Amazon EBS \u00b6 Testing and development NoSQL databases Relational databases Business consistency Enterprise-wide applications Amazon EFS \u00b6 Lift-and-shift application support: EFS is elastic, available, and scalable, and enables you to move enterprise applications easily and quickly without needing to re-architect them. Analytics for big data: It has the ability to run big data applications, which demand significant node throughput, low-latency file access, and read-after-write operations. Content management system and web server support: EFS is a robust throughput file system capable of enabling content management systems and web serving applications, such as archives, websites, or blogs. Application development and testing: Only EFS provides a shared file system needed to share code and files, across multiple compute resources to facilitate auto-scaling workloads. Getting Started with Amazon Elastic File System: Demo \u00b6 Here, you can learn how to quickly create an Amazon Elastic File System (Amazon EFS) file system. As part of this process, you mount your file system on an Amazon Elastic Compute Cloud (Amazon EC2) instance in your virtual private cloud (VPC). Prerequisites \u00b6 You need to know the follwoeing: You\u2019re already familiar with using the Amazon EC2 console to launch instances. Your Amazon VPC, Amazon EC2, and Amazon EFS resources are all in the same AWS Region. You can use the default VPC in the AWS Region that you\u2019re using for this demonstration. Step 1: Create Your Amazon EFS File System \u00b6 To create your Amazon EFS file system: Open the Amazon EFS Management Console at https://console.aws.amazon.com/efs/ . Choose Create file system to open the Create file system dialog box. (Optional) Enter a Name for your file system. For Virtual Private Cloud (VPC) , choose your VPC, or keep it set to your default VPC. Choose Create to create a file system. The File systems page appears with a banner across the top showing the status of the file system you created. A link to access the file system details page appears in the banner when the file system becomes available. Check the file system created and its service recommended settings, see step1 . Step 2: Create Your EC2 Resources and Launch Your EC2 Instance \u00b6 /!\\ Note You can't use Amazon EFS with Microsoft Windows\u2013based Amazon EC2 instances. To launch the EC2 instance and mount an EFS file system: Launch your EC2 instance as usual, see Launch Your EC2 Instance , please follow the next steps recomendations. In the Step,Configure Instance Details , provide the following information: a. For Network , choose the entry for the same VPC that you noted when you created your EFS file system. b. For Subnet , choose a default subnet in any Availability Zone. c. For File systems, make sure that the EFS file system that you created in Step 1: Create Your Amazon EFS File System is selected. The path shown next to the file system ID is the mount point that the EC2 instance will use, which you can change. Choose Add to user data to mount the file system when the EC2 is launched. d. Under Advanced Details , confirm that the user data is present in User data . In the Step, Configure Security Group , set Assign a security group to Select an existing security group . Choose the default security group to make sure that it can access your EFS file system. Finally, Choose Launch to start launching your instance. Step 3: Mount your Amazon EFS File System \u00b6 After creating your EFS volume and launcing your EC2 instance(s) either with Linux or Ubuntu AMIs, see Mounting EFS file systems . Follow the following steps: Connect to your instance(s), see Connecting to your Linux EC2 Instances . Mount your file system , by: a. Open the Amazon EFS console and then select the region where your EFS volume is located. b. Select the radio button next to your file system to display the details. c. Click the Attach button to see the mount instructions link. d. Use the NFS client or EFS mount helper DNS to mount the EFS volume to your instances. You need to prepare your mounting in your instances, see Mounting EFS File System . Step 4: Clean Up Resources and Protect Your AWS Account \u00b6 To clean up resources and protect your AWS account, see Terminate your resources : Connect to your Amazon EC2 instance. Unmount the Amazon EFS file system with the following command. $> sudo umount efs Open the Amazon EFS console at https://console.aws.amazon.com/efs/ . Choose the Amazon EFS file system that you want to delete from the list of file systems. For Actions , choose Delete file system . In the Permanently delete file system dialog box, type the file system ID for the Amazon EFS file system that you want to delete, and then choose Delete File System . In case you finished with your instance(s), you can Terminate Instances and Delete Security Group from Actions . /!\\ Warning Don't delete the default security group for your VPC.","title":"Amazon EFS volumes"},{"location":"EFS/#amazon-efs-volumes","text":"Amazon Elastic File System (Amazon EFS) provides simple, scalable, elastic file storage for use with AWS Cloud services and on-premises resources. It is straightforward to use, and it offers a simple interface that allows you to create and configure file systems quickly and easily. Amazon EFS is designed to provide massively parallel shared access to thousands of Amazon EC2 instances . This enables your applications to achieve high levels of aggregate throughput and IOPS that scale as a file system grows, with consistent low latencies . When an Amazon EFS file system is mounted on Amazon EC2 instances, it provides a standard file system interface and file system access semantics, which allows you to seamlessly integrate Amazon EFS with your existing applications and tools. Multiple Amazon EC2 instances can access an Amazon EFS file system at the same time , thus allowing Amazon EFS to provide a common data source for workloads and applications that run on more than one Amazon EC2 instance. Current details on Amazon EFS can be found at: https://aws.amazon.com/efs/ .","title":"Amazon EFS volumes"},{"location":"EFS/#amazon-efs-features","text":"Amazon EFS is well suited to a broad range of use cases, from home directories to business-critical applications. Customers can use Amazon EFS to move NFS-based file storage workloads to managed file systems on the AWS Cloud. Other use cases include: analytics, web serving and content management, application development and testing, media and entertainment workflows, database backups, and containers and serverless storage. EFS has many features , such as: Highly available and durable Storage classes and lifecycle management Security and compliance Scalable performance Elastic and scalable Encryption Fully managed","title":"Amazon EFS features"},{"location":"EFS/#fully-managed-feature","text":"Amazon EFS is a fully managed service providing NFS shared file system storage for Linux workloads. Amazon EFS makes it simple to create and configure file systems. You don\u2019t have to worry about managing file servers or storage, updating hardware, configuring software, or performing backups. In seconds, you can create a fully managed file system by using the AWS Management Console, the AWS CLI, or an AWS SDK.","title":"Fully Managed feature"},{"location":"EFS/#efs-modes-and-services","text":"EFS has many modes, such as: Performance modes Throughput modes Containers and serverless file storage Data transfer and backup hared file system with NFS v4.0 and v4.1 support Please check EFS pricing, https://aws.amazon.com/efs/pricing/ before start working with it.","title":"EFS modes and services"},{"location":"EFS/#amazon-ebs-vs-efs-volumes","text":"Amazon EFS, and Amazon EBS are AWS\u2019 two different block-storage types that can be applicable for different types of workload needs. Let\u2019s take a closer look at the key features of each option, as well as the similarities and differences , see Amazon EFS FAQs","title":"Amazon EBS vs. EFS volumes"},{"location":"EFS/#similarities-and-differences","text":"Amazon EBS delivers high-availability block-level storage volumes for Amazon Elastic Compute Cloud (EC2) instances. It stores data on a file system which is retained after the EC2 instance is shut down. Amazon EFS offers scalable file storage, also optimized for EC2. It can be used as a common data source for any application or workload that runs on numerous instances. Using an EFS file system, you may configure instances to mount the file system. The main differences between EBS and EFS is that EBS is only accessible from a single EC2 instance in your particular AWS region, while EFS allows you to mount the file system across multiple regions and instances . So how can you choose between Amazon EBS vs EFS? That depends on what benefits you\u2019re looking for, and your use case for your workload. Let\u2019s take an in-depth look at each one to understand their benefits and use cases.","title":"Similarities and Differences"},{"location":"EFS/#ebs-and-efs-use-cases","text":"","title":"EBS and EFS Use Cases"},{"location":"EFS/#amazon-ebs","text":"Testing and development NoSQL databases Relational databases Business consistency Enterprise-wide applications","title":"Amazon EBS"},{"location":"EFS/#amazon-efs","text":"Lift-and-shift application support: EFS is elastic, available, and scalable, and enables you to move enterprise applications easily and quickly without needing to re-architect them. Analytics for big data: It has the ability to run big data applications, which demand significant node throughput, low-latency file access, and read-after-write operations. Content management system and web server support: EFS is a robust throughput file system capable of enabling content management systems and web serving applications, such as archives, websites, or blogs. Application development and testing: Only EFS provides a shared file system needed to share code and files, across multiple compute resources to facilitate auto-scaling workloads.","title":"Amazon EFS"},{"location":"EFS/#getting-started-with-amazon-elastic-file-system-demo","text":"Here, you can learn how to quickly create an Amazon Elastic File System (Amazon EFS) file system. As part of this process, you mount your file system on an Amazon Elastic Compute Cloud (Amazon EC2) instance in your virtual private cloud (VPC).","title":"Getting Started with Amazon Elastic File System: Demo"},{"location":"EFS/#prerequisites","text":"You need to know the follwoeing: You\u2019re already familiar with using the Amazon EC2 console to launch instances. Your Amazon VPC, Amazon EC2, and Amazon EFS resources are all in the same AWS Region. You can use the default VPC in the AWS Region that you\u2019re using for this demonstration.","title":"Prerequisites"},{"location":"EFS/#step-1-create-your-amazon-efs-file-system","text":"To create your Amazon EFS file system: Open the Amazon EFS Management Console at https://console.aws.amazon.com/efs/ . Choose Create file system to open the Create file system dialog box. (Optional) Enter a Name for your file system. For Virtual Private Cloud (VPC) , choose your VPC, or keep it set to your default VPC. Choose Create to create a file system. The File systems page appears with a banner across the top showing the status of the file system you created. A link to access the file system details page appears in the banner when the file system becomes available. Check the file system created and its service recommended settings, see step1 .","title":"Step 1: Create Your Amazon EFS File System"},{"location":"EFS/#step-2-create-your-ec2-resources-and-launch-your-ec2-instance","text":"/!\\ Note You can't use Amazon EFS with Microsoft Windows\u2013based Amazon EC2 instances. To launch the EC2 instance and mount an EFS file system: Launch your EC2 instance as usual, see Launch Your EC2 Instance , please follow the next steps recomendations. In the Step,Configure Instance Details , provide the following information: a. For Network , choose the entry for the same VPC that you noted when you created your EFS file system. b. For Subnet , choose a default subnet in any Availability Zone. c. For File systems, make sure that the EFS file system that you created in Step 1: Create Your Amazon EFS File System is selected. The path shown next to the file system ID is the mount point that the EC2 instance will use, which you can change. Choose Add to user data to mount the file system when the EC2 is launched. d. Under Advanced Details , confirm that the user data is present in User data . In the Step, Configure Security Group , set Assign a security group to Select an existing security group . Choose the default security group to make sure that it can access your EFS file system. Finally, Choose Launch to start launching your instance.","title":"Step 2: Create Your EC2 Resources and Launch Your EC2 Instance"},{"location":"EFS/#step-3-mount-your-amazon-efs-file-system","text":"After creating your EFS volume and launcing your EC2 instance(s) either with Linux or Ubuntu AMIs, see Mounting EFS file systems . Follow the following steps: Connect to your instance(s), see Connecting to your Linux EC2 Instances . Mount your file system , by: a. Open the Amazon EFS console and then select the region where your EFS volume is located. b. Select the radio button next to your file system to display the details. c. Click the Attach button to see the mount instructions link. d. Use the NFS client or EFS mount helper DNS to mount the EFS volume to your instances. You need to prepare your mounting in your instances, see Mounting EFS File System .","title":"Step 3: Mount your  Amazon EFS File System"},{"location":"EFS/#step-4-clean-up-resources-and-protect-your-aws-account","text":"To clean up resources and protect your AWS account, see Terminate your resources : Connect to your Amazon EC2 instance. Unmount the Amazon EFS file system with the following command. $> sudo umount efs Open the Amazon EFS console at https://console.aws.amazon.com/efs/ . Choose the Amazon EFS file system that you want to delete from the list of file systems. For Actions , choose Delete file system . In the Permanently delete file system dialog box, type the file system ID for the Amazon EFS file system that you want to delete, and then choose Delete File System . In case you finished with your instance(s), you can Terminate Instances and Delete Security Group from Actions . /!\\ Warning Don't delete the default security group for your VPC.","title":"Step 4: Clean Up Resources and Protect Your AWS Account"},{"location":"EFSmount/","text":"Mounting EFS File System in Linux and Ubuntu \u00b6 To mount the EFS system you need to check the recommendation before starting the installations in your instances. Then you can mount your EFS volume either by: NFS client {Network-based mounting} EFS mount helper {Local-based mounting} Recommendations \u00b6 There are some recommendations to have your EFS volume mounted successfully, such as: VPC Security groups VPC \u00b6 You should keep all the components of your environment in one VPC, either the default VPC or your created VPC, see Create Your Amazon EFS File System . Security groups \u00b6 In case you need to mount your EFS by using the nfs (Netwrk File System), you need to have two security groupes in each of your instances: the default security group to make sure that it can access your EFS file system. , and your security group for accessing the instance. To do that, see Create Your EC2 Resources : In Step 6: Configure Security Group , set Assign a security group to Select an existing security group. Choose the default security group to make sure that it can access your EFS file system. With your instance selected, select Actions > Networking > Change Security Groups . Select the checkbox for the default VPC security group and click Assign Security Groups . NFS client \u00b6 After connecting to your instances, you can install the NFS client either by the following commands or by copying these commands in the User data section to run them during the instances boot. To do so, Stop your instances and right cick on instance and in the Instance Setting list, choose Edit user data , and write the commands there. Linux AMI Instance \u00b6 Install the NFS client by: $> sudo yum install -y nfs-utils Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-38920a40.efs.us-east-2.amazonaws.com:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress Ubuntu AMI Instance \u00b6 Install the NFS client by: S> sudo apt-get update $> sudo apt-get install nfs-common Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-38920a40.efs.us-east-2.amazonaws.com:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress EFS mount helper \u00b6 After connecting to your instances, you can install the aws-mount-helper either by the following commands or by copying these commands in the User data section to run them during the instances boot. To do so, Stop your instances and right cick on instance and in the Instance Setting list, choose Edit user data , and write the commands there. If you don\u2019t want to get the amazon-efs-utils package from Amazon Linux or Amazon Linux 2 AMIs, the amazon-efs-utils package is also available on GitHub. After you clone the package, you can build and install amazon-efs-utils using one of the following methods, depending on the package type supported by your Linux distribution: RPM \u2013 This package type is supported by Amazon Linux, Red Hat Linux, CentOS, and similar. DEB \u2013 This package type is supported by Ubuntu, Debian, and similar. Installing the amazon-efs-utils Package on Other Linux Distributions : If you haven\u2019t done so already, install git with the following commands. $> sudo yum -y install git From the terminal, clone the amazon-efs-utils tool from GitHub to a directory of your choice, with the following command. $> git clone https://github.com/aws/efs-utils Because you need the bash command make, you can install it with the following command if your operating system doesn\u2019t already have it. $> sudo yum -y install make Linux AMI Instance \u00b6 Build and install amazon-efs-utils as an RPM package a. Open a terminal on your client and navigate to the directory that has the cloned amazon-efs-utils package from GitHub (for example \u201c/home/centos/efs-utils\u201d). b. If you haven\u2019t done so already, install the rpm-builder package with the following command. $> sudo yum -y install rpm-build c. Build the package with the following command. $> sudo make rpm d. Install the amazon-efs-utils package with the following command. $> sudo yum -y install ./build/amazon-efs-utils*rpm Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t efs -o tls fs-38920a40:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress Ubuntu AMI Instance \u00b6 Build and install amazon-efs-utils as a DEB package a. Open a terminal on your client and navigate to the directory that has the cloned amazon-efs-utils package from GitHub. b. Install the binutils package, a dependency for building DEB packages. $> sudo apt-get -y install binutils c. Build the package with the following command. $> ./build-deb.sh d. Install the package with the following command. $> sudo apt-get -y install ./build/amazon-efs-utils*deb Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t efs -o tls fs-38920a40:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress","title":"Mounting EFS File System in Linux and Ubuntu"},{"location":"EFSmount/#mounting-efs-file-system-in-linux-and-ubuntu","text":"To mount the EFS system you need to check the recommendation before starting the installations in your instances. Then you can mount your EFS volume either by: NFS client {Network-based mounting} EFS mount helper {Local-based mounting}","title":"Mounting EFS File System in Linux and Ubuntu"},{"location":"EFSmount/#recommendations","text":"There are some recommendations to have your EFS volume mounted successfully, such as: VPC Security groups","title":"Recommendations"},{"location":"EFSmount/#vpc","text":"You should keep all the components of your environment in one VPC, either the default VPC or your created VPC, see Create Your Amazon EFS File System .","title":"VPC"},{"location":"EFSmount/#security-groups","text":"In case you need to mount your EFS by using the nfs (Netwrk File System), you need to have two security groupes in each of your instances: the default security group to make sure that it can access your EFS file system. , and your security group for accessing the instance. To do that, see Create Your EC2 Resources : In Step 6: Configure Security Group , set Assign a security group to Select an existing security group. Choose the default security group to make sure that it can access your EFS file system. With your instance selected, select Actions > Networking > Change Security Groups . Select the checkbox for the default VPC security group and click Assign Security Groups .","title":"Security groups"},{"location":"EFSmount/#nfs-client","text":"After connecting to your instances, you can install the NFS client either by the following commands or by copying these commands in the User data section to run them during the instances boot. To do so, Stop your instances and right cick on instance and in the Instance Setting list, choose Edit user data , and write the commands there.","title":"NFS client"},{"location":"EFSmount/#linux-ami-instance","text":"Install the NFS client by: $> sudo yum install -y nfs-utils Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-38920a40.efs.us-east-2.amazonaws.com:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress","title":"Linux AMI Instance"},{"location":"EFSmount/#ubuntu-ami-instance","text":"Install the NFS client by: S> sudo apt-get update $> sudo apt-get install nfs-common Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-38920a40.efs.us-east-2.amazonaws.com:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress","title":"Ubuntu AMI Instance"},{"location":"EFSmount/#efs-mount-helper","text":"After connecting to your instances, you can install the aws-mount-helper either by the following commands or by copying these commands in the User data section to run them during the instances boot. To do so, Stop your instances and right cick on instance and in the Instance Setting list, choose Edit user data , and write the commands there. If you don\u2019t want to get the amazon-efs-utils package from Amazon Linux or Amazon Linux 2 AMIs, the amazon-efs-utils package is also available on GitHub. After you clone the package, you can build and install amazon-efs-utils using one of the following methods, depending on the package type supported by your Linux distribution: RPM \u2013 This package type is supported by Amazon Linux, Red Hat Linux, CentOS, and similar. DEB \u2013 This package type is supported by Ubuntu, Debian, and similar. Installing the amazon-efs-utils Package on Other Linux Distributions : If you haven\u2019t done so already, install git with the following commands. $> sudo yum -y install git From the terminal, clone the amazon-efs-utils tool from GitHub to a directory of your choice, with the following command. $> git clone https://github.com/aws/efs-utils Because you need the bash command make, you can install it with the following command if your operating system doesn\u2019t already have it. $> sudo yum -y install make","title":"EFS mount helper"},{"location":"EFSmount/#linux-ami-instance_1","text":"Build and install amazon-efs-utils as an RPM package a. Open a terminal on your client and navigate to the directory that has the cloned amazon-efs-utils package from GitHub (for example \u201c/home/centos/efs-utils\u201d). b. If you haven\u2019t done so already, install the rpm-builder package with the following command. $> sudo yum -y install rpm-build c. Build the package with the following command. $> sudo make rpm d. Install the amazon-efs-utils package with the following command. $> sudo yum -y install ./build/amazon-efs-utils*rpm Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t efs -o tls fs-38920a40:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress","title":"Linux AMI Instance"},{"location":"EFSmount/#ubuntu-ami-instance_1","text":"Build and install amazon-efs-utils as a DEB package a. Open a terminal on your client and navigate to the directory that has the cloned amazon-efs-utils package from GitHub. b. Install the binutils package, a dependency for building DEB packages. $> sudo apt-get -y install binutils c. Build the package with the following command. $> ./build-deb.sh d. Install the package with the following command. $> sudo apt-get -y install ./build/amazon-efs-utils*deb Make a directory called efs to mount on it: $> sudo mkdir efs Go back to the EFS Attach window (in the EFS console ). Mount your file system as your new directory. $> sudo mount -t efs -o tls fs-38920a40:/ efs Verify your file system has been successfully mounted by running the following command: $> df -h Create a test file in your new file system by running a simple dd command to generate a 1GiB file in your new directory. Run the following dd command in your SSH window: $> sudo dd if=/dev/zero of=~/efs/1GiB bs=1M count=1024 status=progress","title":"Ubuntu AMI Instance"},{"location":"RDS/","text":"Databases in AWS \u00b6 Now, in this section,we\u2019re going to discuss how to run relational and NoSQL databases on AWS. We will first look at simply running your own database on top of EC2, much like you would on-premise. Then, we will introduce you to the Amazon Relational Database Service, or RDS. RDS is a managed database service where you can pick amongst popular database engines and let AWS manage your database for you. Next, we will demonstrate Amazon DynamoDB. DynamoDB is a managed NoSQL database that, depending upon your application, may be a better solution than a traditional SQL-based database. Amazon Relational Database (RDS) \u00b6 Amazon Relational Database Service (Amazon RDS) makes it straightforward to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as provisioning hardware, setting up the database, patching, and making backups. Amazon RDS currently supports six database engines: Amazon Aurora: https://aws.amazon.com/rds/aurora/ PostgreSQL: https://aws.amazon.com/rds/postgresql/ MySQL: https://aws.amazon.com/rds/mysql/ MariaDB: https://aws.amazon.com/rds/mariadb/ Oracle: https://aws.amazon.com/rds/oracle/ Microsoft SQL Server: https://aws.amazon.com/rds/sqlserver/ Bring your own database (BYODB) vs Amazon RDS \u00b6 Why you should migrate your relational database to Amazon? Databases are one of the most important parts of any application. So, how were databases before AWS? As we can see on the following chart, there\u2019s a whole lot of different functions that exist when running your own database. So if you were in an on-premises world, ypu would be responsible for everything from power and heating and cooling, racking and stacking the servers, maintaining the servers, so on, all the way up to the application itself. One of the great things about AWS is by simply moving your database onto EC2, a large section of what you would have to do on-premises, you don\u2019t have to worry about in AWS. You don\u2019t have to worry about provisioning the hardware as far as racking and stacking it, maintaining the server. Even installing the operating system is taken care of by simply running your system on EC2. What if there was a way to make it even simpler? Introducing the Amazon Relational Database Service, or RDS. At RDS, you still run a relational database of the flavor of your choosing, whether you\u2019re talking about a MySQL database, an Oracle database, a PostgreSQL database, or other flavors. But the difference is instead of taking care of the patching and the installs and installing the database itself, AWS takes care of all of the rest of the heavy lifting that otherwise your DBA would be in charge of. So no longer does you have to worry about managing the high availability, or managing backups, or taking care of scaling. But all of these pieces now get taken care of because of the Relational Database Service. And the only thing that your DBA needs to worry about is taking care of the application itself se the following chart. So you still are in charge of getting the right schema, getting charge of the data that\u2019s in there, and she is 100% responsible for that. Whether it\u2019s encrypted, who has access to it, AWS has no access to the data .But all of the rest of the undifferentiated heavy lifting that goes into databases, AWS takes care of. Is RDS the perfect solution for everyone? You certainly may be in a case where you\u2019re using a legacy database. Say you\u2019re still running a Sybase shop, you\u2019ll still run that on EC2. But as you look for ways to eliminate tasks from your team and let them focus on what they really prepare to do, RDS can certainly get rid of large portions that they don\u2019t have to worry about anymore. MySQL in Amazon RDS \u00b6 Postgresql in Amazon RDS \u00b6 Migrate your Database to AWS Database \u00b6 You can use the AWS Database Migration Service (AWS DMS) ( https://aws.amazon.com/dms ) to quickly and securely migrate your databases to AWS.","title":"RDS"},{"location":"RDS/#databases-in-aws","text":"Now, in this section,we\u2019re going to discuss how to run relational and NoSQL databases on AWS. We will first look at simply running your own database on top of EC2, much like you would on-premise. Then, we will introduce you to the Amazon Relational Database Service, or RDS. RDS is a managed database service where you can pick amongst popular database engines and let AWS manage your database for you. Next, we will demonstrate Amazon DynamoDB. DynamoDB is a managed NoSQL database that, depending upon your application, may be a better solution than a traditional SQL-based database.","title":"Databases in AWS"},{"location":"RDS/#amazon-relational-database-rds","text":"Amazon Relational Database Service (Amazon RDS) makes it straightforward to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as provisioning hardware, setting up the database, patching, and making backups. Amazon RDS currently supports six database engines: Amazon Aurora: https://aws.amazon.com/rds/aurora/ PostgreSQL: https://aws.amazon.com/rds/postgresql/ MySQL: https://aws.amazon.com/rds/mysql/ MariaDB: https://aws.amazon.com/rds/mariadb/ Oracle: https://aws.amazon.com/rds/oracle/ Microsoft SQL Server: https://aws.amazon.com/rds/sqlserver/","title":"Amazon Relational Database (RDS)"},{"location":"RDS/#bring-your-own-database-byodb-vs-amazon-rds","text":"Why you should migrate your relational database to Amazon? Databases are one of the most important parts of any application. So, how were databases before AWS? As we can see on the following chart, there\u2019s a whole lot of different functions that exist when running your own database. So if you were in an on-premises world, ypu would be responsible for everything from power and heating and cooling, racking and stacking the servers, maintaining the servers, so on, all the way up to the application itself. One of the great things about AWS is by simply moving your database onto EC2, a large section of what you would have to do on-premises, you don\u2019t have to worry about in AWS. You don\u2019t have to worry about provisioning the hardware as far as racking and stacking it, maintaining the server. Even installing the operating system is taken care of by simply running your system on EC2. What if there was a way to make it even simpler? Introducing the Amazon Relational Database Service, or RDS. At RDS, you still run a relational database of the flavor of your choosing, whether you\u2019re talking about a MySQL database, an Oracle database, a PostgreSQL database, or other flavors. But the difference is instead of taking care of the patching and the installs and installing the database itself, AWS takes care of all of the rest of the heavy lifting that otherwise your DBA would be in charge of. So no longer does you have to worry about managing the high availability, or managing backups, or taking care of scaling. But all of these pieces now get taken care of because of the Relational Database Service. And the only thing that your DBA needs to worry about is taking care of the application itself se the following chart. So you still are in charge of getting the right schema, getting charge of the data that\u2019s in there, and she is 100% responsible for that. Whether it\u2019s encrypted, who has access to it, AWS has no access to the data .But all of the rest of the undifferentiated heavy lifting that goes into databases, AWS takes care of. Is RDS the perfect solution for everyone? You certainly may be in a case where you\u2019re using a legacy database. Say you\u2019re still running a Sybase shop, you\u2019ll still run that on EC2. But as you look for ways to eliminate tasks from your team and let them focus on what they really prepare to do, RDS can certainly get rid of large portions that they don\u2019t have to worry about anymore.","title":"Bring your own database (BYODB) vs Amazon RDS"},{"location":"RDS/#mysql-in-amazon-rds","text":"","title":"MySQL in Amazon RDS"},{"location":"RDS/#postgresql-in-amazon-rds","text":"","title":"Postgresql in Amazon RDS"},{"location":"RDS/#migrate-your-database-to-aws-database","text":"You can use the AWS Database Migration Service (AWS DMS) ( https://aws.amazon.com/dms ) to quickly and securely migrate your databases to AWS.","title":"Migrate your Database to AWS Database"},{"location":"RunPython/","text":"Running Python Scripts on EC2 Instances \u00b6 In order to run a python script on an EC2 instance, yuo need to: Login to the AWS webservices Console Launcing an EC2 Instance Connecting to the EC2 Instance Transfering files to the EC2 Instance Running Python Scripts on the EC2 Instance Logging into the AWS Console \u00b6 Connectig to console by browsing https://console.aws.amazon.com/ , then choose the Sign Into the Console : You need to sign as a Root User . Enter you user name and password . After a sucessful login, you will see the AWS Management Console in your screen. In the Find Services bar, search for EC2 Once founded, press on EC2 Check more details on how to login and create an AWS user, see Setting Up an AWS Account . You need to think about your Availability Zone , before start launching an instance, see AWS Infrastructure . Launching an EC2 Instance \u00b6 To launch an EC2 instance, you need to press the Launch Instance button in your EC2 Dashboard . Then follow the wizard: Step1: Choose an Amazone Machine Image (AMI), check all the AMIs , We recommend a Free tier eligible AMIs for training, the name of the free AMIs, such as Ubuntu Server 16.04 LTS Step2: Choose an Instance Type, Check all the Instances Types and Capabilities , We recommend a Free tier eligible Instances for training, The AWS Free Tier allotment for Linux and Microsoft Windows instances is counted separately. You can run 750 hours of a Linux t3.micro , t2.micro , or t1.micro instance plus 750 hours of a Windows t3.micro , t2.micro , or t1.micro instance each month for the first 12 months . Steps 3 to 6: Configure Isnstance, Add Storage, Add Tags, and Configure Security Group You can skip these three steps by just pressing Review and Launch These three steps are related to the instance networking, storage, tags, and security accordingly. By default, the instance is configured well and has a small storage EBS. In case you need to configure those elements and for example add storage, you should not skip these steps. Step7: Review Instance Launch You need just press Launch . You have to use either an existing key pair or generating a new one, see, Create a key pair . Finally, press Launch Instances Press View Instances to see the status of your new instance and give it a Name . Wait until you find your instance status is running . Check more details on how to launch an AWS EC2 instance, see Launch an EC2 instance . Connecting to the EC2 Instance \u00b6 Connecting to the EC2 instances depends on many parameters and there are many ways to establish the connection and to exchange files between your local machine and the instance machine: Connecting to a Linux instance through Local Linux Machine , this can be accomplished by: SSH Connection Connecting to a Linux instance through Local Windows Machine , this can be accomplished by: Putty or MobaXterm Connecting to a Windows instance through Local Windows | Linux Machine Check more details on how to connect to an AWS EC2 instance, see Connect to an EC2 instance . Transfering files to the EC2 Instance \u00b6 Transfering files to the EC2 instances depends on many parameters and there are many ways to exchange files between your local machine and the instance machine: Transferring to | from a Linux instance through Local Linux Machine , this can be accomplished by: SCP FilZilla Transferring to | from a Linux instance through Local Windows Machine , this can be accomplished by: PSCP WinSCP FilZilla Transferring to | from a Windows instance through Local Windows | Linux Machine Check more details on how to transfer [to|from] an AWS EC2 instance, see transfer to|from an EC2 instance . Running Python Scripts on the EC2 Instance \u00b6 After connecting and traferrin files to the Ec2 instance. You can check the availability of the Python on the machine you have. What you need to start running python: Install Python3 It is already installed in the instance machine, and you can check on this by writing: ubuntu@ip-172-31-38-59:~$ python3 Python 3.5.2 (default, Jul 17 2020, 14:04:10) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> exit() ubuntu@ip-172-31-38-59:~$ Install pip3 , will be needed to install more libraries and packages in python: ubuntu@ip-172-31-38-59:~$ sudo apt-get install python3-pip Install new packages by using pip3 , for example install numpy ubuntu@ip-172-31-38-59:~$ pip3 install numpy Prepare a python script to test it, such as import numpy as np a = np.sum([10,20]) print('hello from Hydro!\\n the result is= {}'.format(str(a))) Save this script in a file, named for example test.py , then run it by ubuntu@ip-172-31-38-59:~/testfolder$ python3 test.py hello from Hydro! the result is= 30 Prepare your virtual environment in Python3 \u00b6 Installing Virtualenv using pip3 \u00b6 Install Virtualenv : ubuntu@ip-172-31-38-59:~$ pip3 install virtualenv Collecting virtualenv Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB) 100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.8MB 367kB/s Installing collected packages: virtualenv Successfully installed virtualenv-15.1.0 Where it is located: ubuntu@ip-172-31-38-59:~$ which virtualenv /home/ubuntu/.local/bin/virtualenv Where is python3: ubuntu@ip-172-31-38-59:~$ which python3 /usr/bin/python3 Create a new Virtualenv \u00b6 Initiate a new virtual environment, and name it hydrosat : ubuntu@ip-172-31-38-59:~$ virtualenv -p /usr/bin/python3 hydrosat created virtual environment CPython3.5.2.final.0-64 in 130ms creator CPython3Posix(dest=/home/ubuntu/hydrosat, clear=False, global=False) seeder FromAppData(download=False, setuptools=bundle, pip=bundle, wheel=bundle, via=copy, app_data_dir=/home/ubuntu/.local/share/virtualenv) added seed packages: pip==20.1.1, setuptools==49.2.0, wheel==0.34.2 activators FishActivator,PowerShellActivator,BashActivator,CShellActivator,PythonActivator,XonshActivator activate the new virtual environment: ubuntu@ip-172-31-38-59:~$ source hydrosat/bin/activate (hydrosat) ubuntu@ip-172-31-38-59:~$ python -V Python 3.5.2 deactivate the virtual environment: (hydrosat) ubuntu@ip-172-31-38-59:~$ deactivate ubuntu@ip-172-31-38-59:~$ Delete the virtual environment \u00b6 To delete a virtual environment, simply delete the project folder. Using the previous example, run the following command: ubuntu@ip-172-31-38-59:~$ rm -rf hydrosat ubuntu@ip-172-31-38-59:~$ ls testfolder TextFile.txt ubuntu@ip-172-31-38-59:~$ For mor information, see Installing and using virtualenv with Python 3 and other techniques are here for Virtualenv . Watch it all here \u00b6 Run python on Linux instance, connected from Linux machine \u00b6 Run python on Linux instance, connected from Windows machine \u00b6","title":"Running Python on AWS EC2 Instance"},{"location":"RunPython/#running-python-scripts-on-ec2-instances","text":"In order to run a python script on an EC2 instance, yuo need to: Login to the AWS webservices Console Launcing an EC2 Instance Connecting to the EC2 Instance Transfering files to the EC2 Instance Running Python Scripts on the EC2 Instance","title":"Running Python Scripts on EC2 Instances"},{"location":"RunPython/#logging-into-the-aws-console","text":"Connectig to console by browsing https://console.aws.amazon.com/ , then choose the Sign Into the Console : You need to sign as a Root User . Enter you user name and password . After a sucessful login, you will see the AWS Management Console in your screen. In the Find Services bar, search for EC2 Once founded, press on EC2 Check more details on how to login and create an AWS user, see Setting Up an AWS Account . You need to think about your Availability Zone , before start launching an instance, see AWS Infrastructure .","title":"Logging into the AWS Console"},{"location":"RunPython/#launching-an-ec2-instance","text":"To launch an EC2 instance, you need to press the Launch Instance button in your EC2 Dashboard . Then follow the wizard: Step1: Choose an Amazone Machine Image (AMI), check all the AMIs , We recommend a Free tier eligible AMIs for training, the name of the free AMIs, such as Ubuntu Server 16.04 LTS Step2: Choose an Instance Type, Check all the Instances Types and Capabilities , We recommend a Free tier eligible Instances for training, The AWS Free Tier allotment for Linux and Microsoft Windows instances is counted separately. You can run 750 hours of a Linux t3.micro , t2.micro , or t1.micro instance plus 750 hours of a Windows t3.micro , t2.micro , or t1.micro instance each month for the first 12 months . Steps 3 to 6: Configure Isnstance, Add Storage, Add Tags, and Configure Security Group You can skip these three steps by just pressing Review and Launch These three steps are related to the instance networking, storage, tags, and security accordingly. By default, the instance is configured well and has a small storage EBS. In case you need to configure those elements and for example add storage, you should not skip these steps. Step7: Review Instance Launch You need just press Launch . You have to use either an existing key pair or generating a new one, see, Create a key pair . Finally, press Launch Instances Press View Instances to see the status of your new instance and give it a Name . Wait until you find your instance status is running . Check more details on how to launch an AWS EC2 instance, see Launch an EC2 instance .","title":"Launching an EC2 Instance"},{"location":"RunPython/#connecting-to-the-ec2-instance","text":"Connecting to the EC2 instances depends on many parameters and there are many ways to establish the connection and to exchange files between your local machine and the instance machine: Connecting to a Linux instance through Local Linux Machine , this can be accomplished by: SSH Connection Connecting to a Linux instance through Local Windows Machine , this can be accomplished by: Putty or MobaXterm Connecting to a Windows instance through Local Windows | Linux Machine Check more details on how to connect to an AWS EC2 instance, see Connect to an EC2 instance .","title":"Connecting to the EC2 Instance"},{"location":"RunPython/#transfering-files-to-the-ec2-instance","text":"Transfering files to the EC2 instances depends on many parameters and there are many ways to exchange files between your local machine and the instance machine: Transferring to | from a Linux instance through Local Linux Machine , this can be accomplished by: SCP FilZilla Transferring to | from a Linux instance through Local Windows Machine , this can be accomplished by: PSCP WinSCP FilZilla Transferring to | from a Windows instance through Local Windows | Linux Machine Check more details on how to transfer [to|from] an AWS EC2 instance, see transfer to|from an EC2 instance .","title":"Transfering files to the EC2 Instance"},{"location":"RunPython/#running-python-scripts-on-the-ec2-instance","text":"After connecting and traferrin files to the Ec2 instance. You can check the availability of the Python on the machine you have. What you need to start running python: Install Python3 It is already installed in the instance machine, and you can check on this by writing: ubuntu@ip-172-31-38-59:~$ python3 Python 3.5.2 (default, Jul 17 2020, 14:04:10) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> exit() ubuntu@ip-172-31-38-59:~$ Install pip3 , will be needed to install more libraries and packages in python: ubuntu@ip-172-31-38-59:~$ sudo apt-get install python3-pip Install new packages by using pip3 , for example install numpy ubuntu@ip-172-31-38-59:~$ pip3 install numpy Prepare a python script to test it, such as import numpy as np a = np.sum([10,20]) print('hello from Hydro!\\n the result is= {}'.format(str(a))) Save this script in a file, named for example test.py , then run it by ubuntu@ip-172-31-38-59:~/testfolder$ python3 test.py hello from Hydro! the result is= 30","title":"Running Python Scripts on the EC2 Instance"},{"location":"RunPython/#prepare-your-virtual-environment-in-python3","text":"","title":"Prepare your virtual environment in Python3"},{"location":"RunPython/#installing-virtualenv-using-pip3","text":"Install Virtualenv : ubuntu@ip-172-31-38-59:~$ pip3 install virtualenv Collecting virtualenv Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB) 100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.8MB 367kB/s Installing collected packages: virtualenv Successfully installed virtualenv-15.1.0 Where it is located: ubuntu@ip-172-31-38-59:~$ which virtualenv /home/ubuntu/.local/bin/virtualenv Where is python3: ubuntu@ip-172-31-38-59:~$ which python3 /usr/bin/python3","title":"Installing Virtualenv using pip3"},{"location":"RunPython/#create-a-new-virtualenv","text":"Initiate a new virtual environment, and name it hydrosat : ubuntu@ip-172-31-38-59:~$ virtualenv -p /usr/bin/python3 hydrosat created virtual environment CPython3.5.2.final.0-64 in 130ms creator CPython3Posix(dest=/home/ubuntu/hydrosat, clear=False, global=False) seeder FromAppData(download=False, setuptools=bundle, pip=bundle, wheel=bundle, via=copy, app_data_dir=/home/ubuntu/.local/share/virtualenv) added seed packages: pip==20.1.1, setuptools==49.2.0, wheel==0.34.2 activators FishActivator,PowerShellActivator,BashActivator,CShellActivator,PythonActivator,XonshActivator activate the new virtual environment: ubuntu@ip-172-31-38-59:~$ source hydrosat/bin/activate (hydrosat) ubuntu@ip-172-31-38-59:~$ python -V Python 3.5.2 deactivate the virtual environment: (hydrosat) ubuntu@ip-172-31-38-59:~$ deactivate ubuntu@ip-172-31-38-59:~$","title":"Create a new Virtualenv"},{"location":"RunPython/#delete-the-virtual-environment","text":"To delete a virtual environment, simply delete the project folder. Using the previous example, run the following command: ubuntu@ip-172-31-38-59:~$ rm -rf hydrosat ubuntu@ip-172-31-38-59:~$ ls testfolder TextFile.txt ubuntu@ip-172-31-38-59:~$ For mor information, see Installing and using virtualenv with Python 3 and other techniques are here for Virtualenv .","title":"Delete the virtual environment"},{"location":"RunPython/#watch-it-all-here","text":"","title":"Watch it all here"},{"location":"RunPython/#run-python-on-linux-instance-connected-from-linux-machine","text":"","title":"Run python on Linux instance, connected from Linux machine"},{"location":"RunPython/#run-python-on-linux-instance-connected-from-windows-machine","text":"","title":"Run python on Linux instance, connected from Windows machine"},{"location":"S3/","text":"Amazon S3 Object Storage \u00b6 Amazon Simple Storage Service (Amazon S3) stores data as objects within resources that are called buckets. You can store as many objects as you want within a bucket, and you can write, read, and delete objects in your bucket. Objects can be up to 5 TB in size. You can control access to both the bucket and the objects (who can create, delete, and retrieve objects in the bucket for example), and view access logs for the bucket and its objects. You can also choose the AWS Region where a bucket is stored to optimize for latency, minimize costs, or address regulatory requirements. With Amazon S3, you pay only for what you use. There is no minimum fee. Estimate your monthly bill by using the AWS Simple Monthly Calculator. We charge less where our costs are less, and prices are based on the location of your Amazon S3 bucket. Full details on Amazon S3 can be found here: https://aws.amazon.com/s3 . S3 Benefits \u00b6 Industry-leading performance, scalability, availability, and durability Wide range of cost-effective storage classes Unmatched security, compliance, and audit capabilities Easily manage data and access controls Query-in-place services for analytics Most supported cloud storage service Block-storage(EBS, EFS) vs. S3 Storage \u00b6 Finally, Amazon S3 is an object store good at storing vast numbers of backups or user files. Unlike EBS or EFS, S3 is not limited to EC2. Files stored within an S3 bucket can be accessed programmatically or directly from services such as AWS CloudFront. This is why many websites use it to hold their content and media files, which may be served efficiently from AWS CloudFront. Amazon S3 Use Cases \u00b6 Data lake and big data analytics Backup and restoration Reliable disaster recovery Methodical archiving Amazon S3 Demonstration \u00b6 Let\u2019s go ahead and create a bucket, and actually upload an object into that bucket. See Working with Amazon S3 Buckets , and do: Naviage to the aws console, Look for the S3 services, Select Create Bucket , a. give it a name b. select an aws region c. leave the rest as default Add data (files, images, or videos) to the created bucket a. Upload an object b. Set object properties c. Set object permissions Delete your data, by checking the bucket and click delete","title":"Amazon S3 Storage"},{"location":"S3/#amazon-s3-object-storage","text":"Amazon Simple Storage Service (Amazon S3) stores data as objects within resources that are called buckets. You can store as many objects as you want within a bucket, and you can write, read, and delete objects in your bucket. Objects can be up to 5 TB in size. You can control access to both the bucket and the objects (who can create, delete, and retrieve objects in the bucket for example), and view access logs for the bucket and its objects. You can also choose the AWS Region where a bucket is stored to optimize for latency, minimize costs, or address regulatory requirements. With Amazon S3, you pay only for what you use. There is no minimum fee. Estimate your monthly bill by using the AWS Simple Monthly Calculator. We charge less where our costs are less, and prices are based on the location of your Amazon S3 bucket. Full details on Amazon S3 can be found here: https://aws.amazon.com/s3 .","title":"Amazon S3 Object Storage"},{"location":"S3/#s3-benefits","text":"Industry-leading performance, scalability, availability, and durability Wide range of cost-effective storage classes Unmatched security, compliance, and audit capabilities Easily manage data and access controls Query-in-place services for analytics Most supported cloud storage service","title":"S3 Benefits"},{"location":"S3/#block-storageebs-efs-vs-s3-storage","text":"Finally, Amazon S3 is an object store good at storing vast numbers of backups or user files. Unlike EBS or EFS, S3 is not limited to EC2. Files stored within an S3 bucket can be accessed programmatically or directly from services such as AWS CloudFront. This is why many websites use it to hold their content and media files, which may be served efficiently from AWS CloudFront.","title":"Block-storage(EBS, EFS) vs. S3 Storage"},{"location":"S3/#amazon-s3-use-cases","text":"Data lake and big data analytics Backup and restoration Reliable disaster recovery Methodical archiving","title":"Amazon S3 Use Cases"},{"location":"S3/#amazon-s3-demonstration","text":"Let\u2019s go ahead and create a bucket, and actually upload an object into that bucket. See Working with Amazon S3 Buckets , and do: Naviage to the aws console, Look for the S3 services, Select Create Bucket , a. give it a name b. select an aws region c. leave the rest as default Add data (files, images, or videos) to the created bucket a. Upload an object b. Set object properties c. Set object permissions Delete your data, by checking the bucket and click delete","title":"Amazon S3 Demonstration"},{"location":"WebserversDemo/","text":"Demo: Web Server on AWS EC2 Instances \u00b6 Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides secure and resizable compute capacity in the cloud. It\u2019s designed to make web-scale cloud computing easier for developers. Amazon EC2 presents a true virtual computing environment, and it allows you to use web service interfaces to launch instances with a variety of operating systems, load them with your custom application environment, manage your network\u2019s access permissions, and run your image by using as many or few systems as you want. Details on the features and cost of Amazon EC2 are available at: https://aws.amazon.com/ec2/ Amazon EC2 provides a wide selection of instance types that are optimized to fit different use cases. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity. They give you the flexibility to choose the appropriate mix of resources for your applications. Each instance type includes one or more instance sizes, which allows you to scale your resources to the requirements of your target workload. Current details about available instance types are available at: https://aws.amazon.com/ec2/instance-types/ In this section, you find one of the mostly used servers nowadays (e.g. web server) built on the EC2 comput instances on two different AMI, the first on Linux machine , the second on ubuntu machine , third one on Windows machine . Creating a web server on EC2 instance: Linux Machine \u00b6 1. Launching the Instance with the proper setting \u00b6 To create the web server on Amazon linux machine, follow the steps in Launcing EC2 Instance : Choose Linux AMI, and decide on which kind of instance you need Configure instance details, up tp now leave it as is In case you need more storage, add in the next step more volumes Mange your resources by tags Very important is to manage your security groups, see Create a security group a. Do not forget to add the HTTP/HTTPs rule in order to access your web server b. Make this rule to be accessed from anywhere c. Keep the SSH rule as is, this will allow you to access the machin through SSh Review your instance by adding a public key to access it 2. Installing the webserver [OR User data and shell scripts ] \u00b6 Once instance is launched and running: Connect to it through SSH Transfer the files you may need to install them, through internet or from your local machin Install the web server by using the followin script: $> yum update -y $> amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 $> yum install -y httpd mariadb-server $> systemctl start httpd $> systemctl enable httpd $> usermod -a -G apache ec2-user $> chown -R ec2-user:apache /var/www $> chmod 2775 /var/www $> find /var/www -type d -exec chmod 2775 {} \\; $> find /var/www -type f -exec chmod 0664 {} \\; $> echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php You can run the previous commands in the terminal or run it as a bash script, see all scripts , Check Apache: Webserver installation Linux bash script (Script_linux.sh) , it is as follow: #!/bin/bash yum update -y amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 yum install -y httpd mariadb-server systemctl start httpd systemctl enable httpd usermod -a -G apache ec2-user chown -R ec2-user:apache /var/www chmod 2775 /var/www find /var/www -type d -exec chmod 2775 {} \\; find /var/www -type f -exec chmod 0664 {} \\; echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php In order to run this in the terminal directly, do the following: $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/script_linux.sh $> ./script_linux.sh 3. Test the installed webserver \u00b6 In order to test your webserver in the instance, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com(or the public IP)/phpinfo.php Creating a web server on EC2 instance: Ubuntu Machine \u00b6 1. Launching the Instance with the proper setting \u00b6 To create the web server on Amazon linux machine, follow the steps in Launcing EC2 Instance : Choose Ubuntu server AMI, and decide on which kind of instance you need Configure instance details, up tp now leave it as is In case you need more storage, add in the next step more volumes Mange your resources by tags Very important is to manage your security groups, see Create a security group a. Do not forget to add the HTTP/HTTPs rule in order to access your web server b. Make this rule to be accessed from anywhere c. Keep the SSH rule as is, this will allow you to access the machin through SSh Review your instance by adding a public key to access it 2. Installing the webserver [OR User data and shell scripts ] \u00b6 A. Installing Apache Web Server \u00b6 Once instance is launched and running: Connect to it through SSH Transfer the files you may need to install them, through internet or from your local machin Install the web server by using the followin script: $> sudo apt-get update $> sudo add-apt-repository ppa:ondrej/php $> sudo apt update $> sudo apt install php7.2 $> sudo groupadd apache $> sudo usermod -a -G apache ubuntu $> sudo chown -R ubuntu:apache /var/www $> sudo chmod 2775 /var/www $> find /var/www -type d -exec chmod 2775 {} \\; $> find /var/www -type f -exec chmod 0664 {} \\; $> echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php $> cd /var/www/html/ $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/hydro.html You can run the previous commands in the terminal or run it as a bash script, see all scripts , Check Apache: Webserver installation Ubuntu bash script (Script_linux_1.sh) , it is as follow: #!/bin/bash echo \"Y\" | sudo apt-get update echo \"\" | sudo add-apt-repository ppa:ondrej/php echo \"Y\" | sudo apt update echo \"Y\" | sudo apt install php7.2 sudo groupadd apache sudo usermod -a -G apache ubuntu sudo chown -R ubuntu:apache /var/www sudo chmod 2775 /var/www find /var/www -type d -exec chmod 2775 {} \\; find /var/www -type f -exec chmod 0664 {} \\; echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php cd /var/www/html/ wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/hydro.html In order to run this in the terminal directly, do the following: $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/script_ubuntu_1.sh $> chmod +x script_ubuntu_1.sh $> ./script_ubuntu_1.sh B. Installing Flusk through Python \u00b6 Once instance is launched and running: Connect to it through SSH Transfer the files you may need to install them, through internet or from your local machin Install the web server by using the followin script: $> git clone https://github.com/WillKoehrsen/recurrent-neural-networks.git $> sudo apt-get update $> sudo apt-get install python3-pip $> cd recurrent-neural-networks $> pip3 install --user -r requirements.txt $> cd deployment $> sudo python3 run_keras_server.py You can run the previous commands in the terminal or run it as a bash script, see all scripts , Python web flax: Webserver installation Ubuntu bash script (test.sh) , it is as follow: #!/bin/bash git clone https://github.com/WillKoehrsen/recurrent-neural-networks.git echo \"Y\" | sudo apt-get update echo \"Y\" | sudo apt-get install python3-pip cd recurrent-neural-networks pip3 install --user -r requirements.txt cd deployment sudo python3 run_keras_server.py In order to run this in the terminal directly, do the following: $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/test.sh $> chmod +x test.sh $> ./test.sh 3. Test the installed webserver \u00b6 A. Test Apache Server \u00b6 In order to test your webserver in the instance, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com(or the public IP)/phpinfo.php http://my.public.dns.amazonaws.com(or the public IP)/ http://my.public.dns.amazonaws.com(or the public IP)/hydro.html B. Test Flusk Server \u00b6 In order to test your webserver in the instance, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com(or the public IP)/ Creating a web server on EC2 instance: Windows Machine \u00b6 1. Create instance with a Windwos AMI \u00b6 To creat an instance, please check Getting started with Amazon EC2 Windows instances . 2. Connect to the Windows instance \u00b6 To connect to a Windows instance, see Connecting to Your Windows Instance in the Amazon EC2 User Guide for Windows Instances. To transfer files to and from a Windows instance, see Transfer files to Windows instances in the Amazon EC2 User Guide for Windows Instances. Use remmina to connect to your instance and transfer files from ubuntu machine. Check How to create shared folder on Windows Remote Desktop from Ubuntu via Remmina . 3. Install the web server on Windows \u00b6 How to Install Apache on a Windows Server Running commands on your Linux instance at launch \u00b6 When you launch an instance in Amazon EC2, you have the option of passing user data to the instance that can be used to perform common automated configuration tasks and even run scripts after the instance starts. You can pass two types of user data to Amazon EC2: shell scripts and cloud-init directives. You can also pass this data into the launch wizard as plain text, as a file (this is useful for launching instances using the command line tools), or as base64-encoded text (for API calls). Specify instance user data at launch \u00b6 You can specify instance user data when you launch the instance. If the root volume of the instance is an EBS volume, you can also stop the instance and update its user data. Follow the procedure for launching an instance at Launching an instance using the Launch Instance Wizard , but when you get to Step 3: Configure Instance Details in that procedure, copy your shell script in the User data field, and then complete the launch procedure. In the example script below, the script creates and configures our web server. #!/bin/bash yum update -y amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 yum install -y httpd mariadb-server systemctl start httpd systemctl enable httpd usermod -a -G apache ec2-user chown -R ec2-user:apache /var/www chmod 2775 /var/www find /var/www -type d -exec chmod 2775 {} \\; find /var/www -type f -exec chmod 0664 {} \\; echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php Allow enough time for the instance to launch and execute the commands in your script, and then check to see that your script has completed the tasks that you intended. For our example, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com/phpinfo.php You should see the PHP information page. If you are unable to see the PHP information page, check that the security group you are using contains a rule to allow HTTP (port 80) traffic. For more information, see Adding rules to a security group . (Optional) If your script did not accomplish the tasks you were expecting it to, or if you just want to verify that your script completed without errors, examine the cloud-init output log file at /var/log/cloud-init-output.log and look for error messages in the output. View and update the instance user data \u00b6 To modify instance user data Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Instances . Select the instance and choose Actions, Instance State, Stop . /!\\ Warning When you stop an instance, the data on any instance store volumes is erased. To keep data from instance store volumes, be sure to back it up to persistent storage. When prompted for confirmation, choose Yes, Stop . It can take a few minutes for the instance to stop. With the instance still selected, choose Actions, Instance Settings, View/Change User Data . You can\u2019t change the user data if the instance is running, but you can view it. In the View/Change User Data dialog box, update the user data, and then choose Save. Restart the instance. The new user data is visible on your instance after you restart it; however, user data scripts are not executed. Running commands on your Windows instance at launch \u00b6 For information about running commands on your Windows instance at launch, see Running Commands on Your Windows Instance at Launch and Managing Windows Instance Configuration in the Amazon EC2 User Guide for Windows Instances. More complex automation scenarios during the launching of instances \u00b6 If you are interested in more complex automation scenarios, consider using AWS CloudFormation and AWS OpsWorks. For more information, see the AWS CloudFormation User Guide and the AWS OpsWorks User Guide .","title":"Demo--Web server on EC2 Linux and Ubuntu Machines"},{"location":"WebserversDemo/#demo-web-server-on-aws-ec2-instances","text":"Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides secure and resizable compute capacity in the cloud. It\u2019s designed to make web-scale cloud computing easier for developers. Amazon EC2 presents a true virtual computing environment, and it allows you to use web service interfaces to launch instances with a variety of operating systems, load them with your custom application environment, manage your network\u2019s access permissions, and run your image by using as many or few systems as you want. Details on the features and cost of Amazon EC2 are available at: https://aws.amazon.com/ec2/ Amazon EC2 provides a wide selection of instance types that are optimized to fit different use cases. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity. They give you the flexibility to choose the appropriate mix of resources for your applications. Each instance type includes one or more instance sizes, which allows you to scale your resources to the requirements of your target workload. Current details about available instance types are available at: https://aws.amazon.com/ec2/instance-types/ In this section, you find one of the mostly used servers nowadays (e.g. web server) built on the EC2 comput instances on two different AMI, the first on Linux machine , the second on ubuntu machine , third one on Windows machine .","title":"Demo: Web Server on AWS EC2 Instances"},{"location":"WebserversDemo/#creating-a-web-server-on-ec2-instance-linux-machine","text":"","title":"Creating a web server on EC2 instance: Linux Machine"},{"location":"WebserversDemo/#1-launching-the-instance-with-the-proper-setting","text":"To create the web server on Amazon linux machine, follow the steps in Launcing EC2 Instance : Choose Linux AMI, and decide on which kind of instance you need Configure instance details, up tp now leave it as is In case you need more storage, add in the next step more volumes Mange your resources by tags Very important is to manage your security groups, see Create a security group a. Do not forget to add the HTTP/HTTPs rule in order to access your web server b. Make this rule to be accessed from anywhere c. Keep the SSH rule as is, this will allow you to access the machin through SSh Review your instance by adding a public key to access it","title":"1. Launching the Instance with the proper setting"},{"location":"WebserversDemo/#2-installing-the-webserver-or-user-data-and-shell-scripts","text":"Once instance is launched and running: Connect to it through SSH Transfer the files you may need to install them, through internet or from your local machin Install the web server by using the followin script: $> yum update -y $> amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 $> yum install -y httpd mariadb-server $> systemctl start httpd $> systemctl enable httpd $> usermod -a -G apache ec2-user $> chown -R ec2-user:apache /var/www $> chmod 2775 /var/www $> find /var/www -type d -exec chmod 2775 {} \\; $> find /var/www -type f -exec chmod 0664 {} \\; $> echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php You can run the previous commands in the terminal or run it as a bash script, see all scripts , Check Apache: Webserver installation Linux bash script (Script_linux.sh) , it is as follow: #!/bin/bash yum update -y amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 yum install -y httpd mariadb-server systemctl start httpd systemctl enable httpd usermod -a -G apache ec2-user chown -R ec2-user:apache /var/www chmod 2775 /var/www find /var/www -type d -exec chmod 2775 {} \\; find /var/www -type f -exec chmod 0664 {} \\; echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php In order to run this in the terminal directly, do the following: $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/script_linux.sh $> ./script_linux.sh","title":"2. Installing the webserver [OR User data and shell scripts]"},{"location":"WebserversDemo/#3-test-the-installed-webserver","text":"In order to test your webserver in the instance, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com(or the public IP)/phpinfo.php","title":"3. Test the installed webserver"},{"location":"WebserversDemo/#creating-a-web-server-on-ec2-instance-ubuntu-machine","text":"","title":"Creating a web server on EC2 instance: Ubuntu Machine"},{"location":"WebserversDemo/#1-launching-the-instance-with-the-proper-setting_1","text":"To create the web server on Amazon linux machine, follow the steps in Launcing EC2 Instance : Choose Ubuntu server AMI, and decide on which kind of instance you need Configure instance details, up tp now leave it as is In case you need more storage, add in the next step more volumes Mange your resources by tags Very important is to manage your security groups, see Create a security group a. Do not forget to add the HTTP/HTTPs rule in order to access your web server b. Make this rule to be accessed from anywhere c. Keep the SSH rule as is, this will allow you to access the machin through SSh Review your instance by adding a public key to access it","title":"1. Launching the Instance with the proper setting"},{"location":"WebserversDemo/#2-installing-the-webserver-or-user-data-and-shell-scripts_1","text":"","title":"2. Installing the webserver [OR User data and shell scripts]"},{"location":"WebserversDemo/#a-installing-apache-web-server","text":"Once instance is launched and running: Connect to it through SSH Transfer the files you may need to install them, through internet or from your local machin Install the web server by using the followin script: $> sudo apt-get update $> sudo add-apt-repository ppa:ondrej/php $> sudo apt update $> sudo apt install php7.2 $> sudo groupadd apache $> sudo usermod -a -G apache ubuntu $> sudo chown -R ubuntu:apache /var/www $> sudo chmod 2775 /var/www $> find /var/www -type d -exec chmod 2775 {} \\; $> find /var/www -type f -exec chmod 0664 {} \\; $> echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php $> cd /var/www/html/ $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/hydro.html You can run the previous commands in the terminal or run it as a bash script, see all scripts , Check Apache: Webserver installation Ubuntu bash script (Script_linux_1.sh) , it is as follow: #!/bin/bash echo \"Y\" | sudo apt-get update echo \"\" | sudo add-apt-repository ppa:ondrej/php echo \"Y\" | sudo apt update echo \"Y\" | sudo apt install php7.2 sudo groupadd apache sudo usermod -a -G apache ubuntu sudo chown -R ubuntu:apache /var/www sudo chmod 2775 /var/www find /var/www -type d -exec chmod 2775 {} \\; find /var/www -type f -exec chmod 0664 {} \\; echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php cd /var/www/html/ wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/hydro.html In order to run this in the terminal directly, do the following: $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/script_ubuntu_1.sh $> chmod +x script_ubuntu_1.sh $> ./script_ubuntu_1.sh","title":"A. Installing Apache Web Server"},{"location":"WebserversDemo/#b-installing-flusk-through-python","text":"Once instance is launched and running: Connect to it through SSH Transfer the files you may need to install them, through internet or from your local machin Install the web server by using the followin script: $> git clone https://github.com/WillKoehrsen/recurrent-neural-networks.git $> sudo apt-get update $> sudo apt-get install python3-pip $> cd recurrent-neural-networks $> pip3 install --user -r requirements.txt $> cd deployment $> sudo python3 run_keras_server.py You can run the previous commands in the terminal or run it as a bash script, see all scripts , Python web flax: Webserver installation Ubuntu bash script (test.sh) , it is as follow: #!/bin/bash git clone https://github.com/WillKoehrsen/recurrent-neural-networks.git echo \"Y\" | sudo apt-get update echo \"Y\" | sudo apt-get install python3-pip cd recurrent-neural-networks pip3 install --user -r requirements.txt cd deployment sudo python3 run_keras_server.py In order to run this in the terminal directly, do the following: $> wget https://raw.githubusercontent.com/AbdallahCoptan/HandsOn/master/AWS/docs/Codes/test.sh $> chmod +x test.sh $> ./test.sh","title":"B. Installing Flusk through Python"},{"location":"WebserversDemo/#3-test-the-installed-webserver_1","text":"","title":"3. Test the installed webserver"},{"location":"WebserversDemo/#a-test-apache-server","text":"In order to test your webserver in the instance, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com(or the public IP)/phpinfo.php http://my.public.dns.amazonaws.com(or the public IP)/ http://my.public.dns.amazonaws.com(or the public IP)/hydro.html","title":"A. Test Apache Server"},{"location":"WebserversDemo/#b-test-flusk-server","text":"In order to test your webserver in the instance, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com(or the public IP)/","title":"B. Test Flusk Server"},{"location":"WebserversDemo/#creating-a-web-server-on-ec2-instance-windows-machine","text":"","title":"Creating a web server on EC2 instance: Windows Machine"},{"location":"WebserversDemo/#1-create-instance-with-a-windwos-ami","text":"To creat an instance, please check Getting started with Amazon EC2 Windows instances .","title":"1. Create instance with a Windwos AMI"},{"location":"WebserversDemo/#2-connect-to-the-windows-instance","text":"To connect to a Windows instance, see Connecting to Your Windows Instance in the Amazon EC2 User Guide for Windows Instances. To transfer files to and from a Windows instance, see Transfer files to Windows instances in the Amazon EC2 User Guide for Windows Instances. Use remmina to connect to your instance and transfer files from ubuntu machine. Check How to create shared folder on Windows Remote Desktop from Ubuntu via Remmina .","title":"2. Connect to the Windows instance"},{"location":"WebserversDemo/#3-install-the-web-server-on-windows","text":"How to Install Apache on a Windows Server","title":"3. Install the web server on Windows"},{"location":"WebserversDemo/#running-commands-on-your-linux-instance-at-launch","text":"When you launch an instance in Amazon EC2, you have the option of passing user data to the instance that can be used to perform common automated configuration tasks and even run scripts after the instance starts. You can pass two types of user data to Amazon EC2: shell scripts and cloud-init directives. You can also pass this data into the launch wizard as plain text, as a file (this is useful for launching instances using the command line tools), or as base64-encoded text (for API calls).","title":"Running commands on your Linux instance at launch"},{"location":"WebserversDemo/#specify-instance-user-data-at-launch","text":"You can specify instance user data when you launch the instance. If the root volume of the instance is an EBS volume, you can also stop the instance and update its user data. Follow the procedure for launching an instance at Launching an instance using the Launch Instance Wizard , but when you get to Step 3: Configure Instance Details in that procedure, copy your shell script in the User data field, and then complete the launch procedure. In the example script below, the script creates and configures our web server. #!/bin/bash yum update -y amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 yum install -y httpd mariadb-server systemctl start httpd systemctl enable httpd usermod -a -G apache ec2-user chown -R ec2-user:apache /var/www chmod 2775 /var/www find /var/www -type d -exec chmod 2775 {} \\; find /var/www -type f -exec chmod 0664 {} \\; echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php Allow enough time for the instance to launch and execute the commands in your script, and then check to see that your script has completed the tasks that you intended. For our example, in a web browser, enter the URL of the PHP test file the script created. This URL is the public DNS address of your instance followed by a forward slash and the file name. http://my.public.dns.amazonaws.com/phpinfo.php You should see the PHP information page. If you are unable to see the PHP information page, check that the security group you are using contains a rule to allow HTTP (port 80) traffic. For more information, see Adding rules to a security group . (Optional) If your script did not accomplish the tasks you were expecting it to, or if you just want to verify that your script completed without errors, examine the cloud-init output log file at /var/log/cloud-init-output.log and look for error messages in the output.","title":"Specify instance user data at launch"},{"location":"WebserversDemo/#view-and-update-the-instance-user-data","text":"To modify instance user data Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . In the navigation pane, choose Instances . Select the instance and choose Actions, Instance State, Stop . /!\\ Warning When you stop an instance, the data on any instance store volumes is erased. To keep data from instance store volumes, be sure to back it up to persistent storage. When prompted for confirmation, choose Yes, Stop . It can take a few minutes for the instance to stop. With the instance still selected, choose Actions, Instance Settings, View/Change User Data . You can\u2019t change the user data if the instance is running, but you can view it. In the View/Change User Data dialog box, update the user data, and then choose Save. Restart the instance. The new user data is visible on your instance after you restart it; however, user data scripts are not executed.","title":"View and update the instance user data"},{"location":"WebserversDemo/#running-commands-on-your-windows-instance-at-launch","text":"For information about running commands on your Windows instance at launch, see Running Commands on Your Windows Instance at Launch and Managing Windows Instance Configuration in the Amazon EC2 User Guide for Windows Instances.","title":"Running commands on your Windows instance at launch"},{"location":"WebserversDemo/#more-complex-automation-scenarios-during-the-launching-of-instances","text":"If you are interested in more complex automation scenarios, consider using AWS CloudFormation and AWS OpsWorks. For more information, see the AWS CloudFormation User Guide and the AWS OpsWorks User Guide .","title":"More complex automation scenarios during the launching of instances"},{"location":"awsStore/","text":"Storage on Amazon Web Services \u00b6 Storage is a large part of every enterprise architecture. Building and maintaining your own storage repository is complex, expensive, and time-consuming. Like computing, you don\u2019t want to underprovision or overprovision for your storage needs. And as your application grows, so does the amount of data that comes along with it. You want to ensure that you\u2019re prepared for this type of change in storage demands. AWS offers a complete range of cloud storage services to support both: application requirements, as well as archival and compliance requirements. AWS storage options enable customers to store and access their data over the internet in: a durable, reliable, and cost-effective manner. Storage Scenario \u00b6 When you have a corporate address book application which is hosted on a web page. This application has many types of data/information, such as static and dynamic content. There are images for each contact, as well as information about each contact, like their name and location. The images, files, and videos in such applications should be stored in a storage volume such as Amazon S3. And information for each contact, like their name and location, is coming from Amazon Relational Database Service, or Amazon RDS. In addition to this, we also need to store the static content that is the actual HTML document for the site. So why are we storing images in S3, but contact in RDS? To answer this question, we come up with a classification for the storage on AWS: object-level storage block-level storage S3 is what we call object-level storage, whereas RDS runs on block-level storage. [Object vs. block]-level Storage \u00b6 Object-level strorage works like this, If you have an image, like what we have in the previous scenario, and you want to update that image, you have to update the entire file . So the whole file\u2019s going to change. In contrast, databases like Amazon RDS run on top of block-level storage. How this works is if we wanted to change the location for a contact, we could just change the corresponding blocks. We do not need to update the entire data file for every single change. For object storage, we use Amazon S3. This provides highly durable and scalable stores for items like images, videos, text files, and more. Storage for databases and EC2 instances use block-level storage ,like Amazon Elastic Block Storage, or EBS. For file storage and shared file systems , Amazon offers Amazon Elastic File System, or Amazon EFS. Storage Object-level Block-level Formate Images, files, and videos Distributed files, and Databases Service(s) Amazon S3 EC2 instance store, Amazon EBS, and Amazon EFS","title":"Storage on AWS"},{"location":"awsStore/#storage-on-amazon-web-services","text":"Storage is a large part of every enterprise architecture. Building and maintaining your own storage repository is complex, expensive, and time-consuming. Like computing, you don\u2019t want to underprovision or overprovision for your storage needs. And as your application grows, so does the amount of data that comes along with it. You want to ensure that you\u2019re prepared for this type of change in storage demands. AWS offers a complete range of cloud storage services to support both: application requirements, as well as archival and compliance requirements. AWS storage options enable customers to store and access their data over the internet in: a durable, reliable, and cost-effective manner.","title":"Storage on Amazon Web Services"},{"location":"awsStore/#storage-scenario","text":"When you have a corporate address book application which is hosted on a web page. This application has many types of data/information, such as static and dynamic content. There are images for each contact, as well as information about each contact, like their name and location. The images, files, and videos in such applications should be stored in a storage volume such as Amazon S3. And information for each contact, like their name and location, is coming from Amazon Relational Database Service, or Amazon RDS. In addition to this, we also need to store the static content that is the actual HTML document for the site. So why are we storing images in S3, but contact in RDS? To answer this question, we come up with a classification for the storage on AWS: object-level storage block-level storage S3 is what we call object-level storage, whereas RDS runs on block-level storage.","title":"Storage Scenario"},{"location":"awsStore/#object-vs-block-level-storage","text":"Object-level strorage works like this, If you have an image, like what we have in the previous scenario, and you want to update that image, you have to update the entire file . So the whole file\u2019s going to change. In contrast, databases like Amazon RDS run on top of block-level storage. How this works is if we wanted to change the location for a contact, we could just change the corresponding blocks. We do not need to update the entire data file for every single change. For object storage, we use Amazon S3. This provides highly durable and scalable stores for items like images, videos, text files, and more. Storage for databases and EC2 instances use block-level storage ,like Amazon Elastic Block Storage, or EBS. For file storage and shared file systems , Amazon offers Amazon Elastic File System, or Amazon EFS. Storage Object-level Block-level Formate Images, files, and videos Distributed files, and Databases Service(s) Amazon S3 EC2 instance store, Amazon EBS, and Amazon EFS","title":"[Object vs. block]-level Storage"},{"location":"contact/","text":"","title":"Contact"},{"location":"ebsDemo/","text":"Amazon EBS Demonstrations \u00b6 Amazon Elastic Block Store (Amazon EBS) provides persistent block storage volumes for use with Amazon EC2 instances in the AWS Cloud. Each Amazon EBS volume is automatically replicated inside an Availability Zone to protect you from component failure, which offers high availability and durability. Amazon EBS volumes offer the consistent and low-latency performance that you need to run your workloads. Amazon EBS provides a range of options that allow you to optimize storage performance and cost for your workload. These options are divided into two major categories: Solid State Drive (SSD)-backed storage for transactional workloads, such as databases and boot volumes (performance depends primarily on IOPS) Hard Disk Drive (HDD)-backed storage for throughput-intensive workloads, such as MapReduce and log processing (performance depends primarily on MB/s). Note: EBS types and services quotas \u00b6 Before using the Amazon EBS block storage, you need to check the types of the EBS volumes very carfuly, by checking Amazon EBS volume types . As your account is limited on the number of EBS volumes that you can use, For more information about these limits, see Amazon EC2 Service Quotas . How to request an increase in your limits, see Requesting a quota increase . The Elastic Volume feature of Amazon EBS allows you to: dynamically increase capacity, tune performance, and change the type of live volumes with no downtime or performance impact. This allows you to easily right-size your deployment and adapt to performance changes. Pricing for Amazon EBS is based on the amount (volume) and type of Amazon EBS volume that you provision. For pricing information, see: https://aws.amazon.com/ebs/pricing/ . Confirm that you are looking at cost in the correct Region. Full details on Amazon EBS are available here: https://aws.amazon.com/ebs Important feature in Amazone EBS \u00b6 EBS provides the most common block storage you will use at AWS. When you launch your EC2 instance, you\u2019re going to need some kind of block storage to go with it. It\u2019s part of the boot volume or maybe it\u2019s a separate data volume. AWS has racks of unused storage that you can provision to sizes as large as you need up to many terabytes in size. When you launch the EC2 instance, the boot volume can attach directly to your EC2 instance, as well as the data volume. These volumes live independent of the EC2 instance themselves . In fact, they may already exist before your EC2 instance launches. When it launches, it simply finds the volume and attaches it the same way you might have an old drive from a laptop. As in the following image, The EC2 instance, when it connects to the EBS volumes, now has a direct communication to these volumes. Nobody else can talk directly to them. It\u2019s how AWS maintains secure communications at all times. The EBS volumes have a lifecycle independent of EC2. What does this mean? Let\u2019s say that this EC2 instance is part of a developer machine that over the weekend, nobody is using because your developers go home over the weekend. So, during those 48 hours, 72 hours, there\u2019s no reason to be paying for EC2 because nobody is using it. All you have to do is simply stop the instance. When you stop EC2, the EBS volumes survive. They just simply are no longer connected to the EC2 instance. See the following image. Then, Monday morning comes around, your developer starts up an EC2 instance, and a brand new instance is created. It reattaches those same EBS volumes the same way you would simply shut down your laptop over the weekend and start it again on Monday. But over the weekend, you didn\u2019t have to pay for EC2. But there\u2019s more we can take advantage of the idea that EBS lives outside of EC2 because what if I want a more powerful machine? Just like I could take your hard drives out of your existing laptop and put it in a stronger laptop, at AWS, you can simply provision a newer, bigger EC2 instance, stop the old EC2 instance, and then just attach the volumes to your brand new EC2. So, now, I\u2019ve got the same boot volume, the same applications, the same data only running newer, bigger, stronger. It\u2019s one of the many advantages EBS brings to you as part of AWS Difference between EBS and Instance Store \u00b6 EC2 instances support two types for block level storage: - EC2 Instances can be launched using either Elastic Block Store (EBS) or - Instance Store volume as root volumes and additional volumes. EBS volume is network attached drive which results in slow performance but data is persistent meaning even if you reboot the instance data will be there. Instance store provides temporary block-level storage for your instance. This storage is located on disks that are physically attached to the host computer. Note \u00b6 EC2 instances can be launched by choosing between AMIs backed by EC2 instance store and AMIs backed by EBS. However, AWS recommends use of EBS backed AMIs, because they launch faster and use persistent storage, please see the AMIs Categories . For more information, please check AWS \u2014 Difference between EBS and Instance Store . Demonestrations: Creating an Amazon EBS volume \u00b6 You can create an Amazon EBS volumes, by the following three ways: The root storage through launching instance wizard Create a new EBS volume and attached it to a new/old instance Create from a saved snapshot. Demo: EBS as a root storage for EC2 instances \u00b6 This this demo shows how to use the EBS storage as a root storage while launching your EC2 instance. Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 4: Add Storage , you can change your volume size, encrypte its data, and uncheck the deletion after instance termination. If you terminate the instance, you will find this voulume exists and avialble for attachment. To attach this old volume, see Attaching an Amazon EBS volume to an instance . To mount this old volume, see Mount an attached volume . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume . Demo: Create an empty EBS volume and attach it to a running instance \u00b6 This this demo shows how to craete an empty volume and attach it to an EC2 instance. Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 2: Choose an Instance Type , choose zour favorite availability zone , it is not agood idea to keep it randome choise at this moment. Start creating an empty EBS volume, see create empty EBS volume through the console . /!\\ Note The New empty volume and the EC2 instance have to be in the same availability zone Attaching this new volume, see Attaching an Amazon EBS volume to an instance . Mounting this new volume, see Mount an attached volume . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume . Demo: Create an EBS volume from a previously created snapshot and attach it to a running instance \u00b6 This this demo shows how to create an EBS volume from a snapshot and attach it to an EC2 instance, see Creating Amazon EBS snapshots . Creating a snapshot for an EBS volume \u00b6 To create a snapshot for an EBS volume, you should have already an EC2 instance running with a an EBS root volume or an exist volume, to do so see this demo , then follow the folllowing steps: Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . Choose Snapshots under Elastic Block Store in the navigation pane. Choose Create Snapshot. For Select resource type , choose Volume . For Volume , select the volume . (Optional) Enter a description for the snapshot. (Optional) Choose Add Tag to add tags to your snapshot. For each tag, provide a tag key and a tag value. Choose Create Snapshot . To create a snapshot using the command line You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-snapshot (AWS CLI) New-EC2Snapshot (AWS Tools for Windows PowerShell) Creating a multi-volume snapshot \u00b6 Use the following procedure to create a snapshot from the volumes of an instance. To create a snapshot for multi-EBS volumes, you should have already an EC2 instance running with multiple EBS volumes, to do so see this demo , To create multi-volume snapshots using the console: Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . Choose Snapshots under Elastic Block Store in the navigation pane. Choose Create Snapshot. For Select resource type , choose Instance . Select the instance ID for which you want to create simultaneous backups for all of the attached EBS volumes. Multi-volume snapshots support up to 40 EBS volumes per instance. (Optional) Set Exclude root volume . (Optional) Set Copy tags from volume flag to automatically copy tags from the source volume to the corresponding snapshots. This sets snapshot metadata\u2014such as access policies, attachment information, and cost allocation\u2014to match the source volume. (Optional) Choose Add Tag to add tags to your snapshot. For each tag, provide a tag key and a tag value. Choose Create Snapshot . During snapshot creation, the snapshots are managed together. If one of the snapshots in the volume set fails, the other snapshots are moved to error status for the volume set. You can monitor the progress of your snapshots using CloudWatch Events. After the snapshot creation process completes, CloudWatch generates an event that contains the status and all of the relevant snapshots details for the affected instance. To create multi-volume snapshots using the command line You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-snapshot (AWS CLI) New-EC2SnapshotBatch (AWS Tools for Windows PowerShell) Other operations for the volumes Snapshots \u00b6 You can copy snapshots, share snapshots, and create volumes from snapshots. For more information, see the following: Copying an Amazon EBS snapshot Sharing an Amazon EBS snapshot Creating a volume from a snapshot Creating a volume from a snapshot \u00b6 Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 2: Choose an Instance Type , choose your favorite availability zone , it is not agood idea to keep it randome choise at this moment. Start creating an EBS volume from a snapshot, see Create an EBS Volume from a Snapshot . Attaching this new volume, see Attaching an Amazon EBS volume to an instance . Mounting this new volume, see Mount an attached volume . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume . Best practice while mounting a volume which has been created through a snapshot \u00b6 During the mount of an EBS volume that has been created from a snapshot, you may face a problem called: XFS: Filesystem has duplicate UUID \u2013 can\u2019t mount To solve this problem, you need to repair the xfs and then generate a new UUID , as follow: $> sudo xfs_repair -L /dev/xvdh $> sudo xfs_admin -U generate /dev/xvdh Please check the following, How To Solve \u201cXFS: Filesystem has duplicate UUID \u2013 can\u2019t mount\u201d , and xfs_repair(8) - Linux man page for more informtion. Demo: Attach an EBS volume to a Windows AMI instance \u00b6 Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 2: Choose an Instance Type , choose your favorite availability zone , it is not agood idea to keep it randome choise at this moment. Start creating an empty EBS volume, see create empty EBS volume through the console . /!\\ Note The New empty volume and the EC2 instance have to be in the same availability zone Attaching this new volume, see Attaching an Amazon EBS volume to an instance . Mounting this new volume, see Making an Amazon EBS volume available for use on Windows . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume .","title":"Amazon EBS Demo"},{"location":"ebsDemo/#amazon-ebs-demonstrations","text":"Amazon Elastic Block Store (Amazon EBS) provides persistent block storage volumes for use with Amazon EC2 instances in the AWS Cloud. Each Amazon EBS volume is automatically replicated inside an Availability Zone to protect you from component failure, which offers high availability and durability. Amazon EBS volumes offer the consistent and low-latency performance that you need to run your workloads. Amazon EBS provides a range of options that allow you to optimize storage performance and cost for your workload. These options are divided into two major categories: Solid State Drive (SSD)-backed storage for transactional workloads, such as databases and boot volumes (performance depends primarily on IOPS) Hard Disk Drive (HDD)-backed storage for throughput-intensive workloads, such as MapReduce and log processing (performance depends primarily on MB/s).","title":"Amazon EBS Demonstrations"},{"location":"ebsDemo/#note-ebs-types-and-services-quotas","text":"Before using the Amazon EBS block storage, you need to check the types of the EBS volumes very carfuly, by checking Amazon EBS volume types . As your account is limited on the number of EBS volumes that you can use, For more information about these limits, see Amazon EC2 Service Quotas . How to request an increase in your limits, see Requesting a quota increase . The Elastic Volume feature of Amazon EBS allows you to: dynamically increase capacity, tune performance, and change the type of live volumes with no downtime or performance impact. This allows you to easily right-size your deployment and adapt to performance changes. Pricing for Amazon EBS is based on the amount (volume) and type of Amazon EBS volume that you provision. For pricing information, see: https://aws.amazon.com/ebs/pricing/ . Confirm that you are looking at cost in the correct Region. Full details on Amazon EBS are available here: https://aws.amazon.com/ebs","title":"Note: EBS types and services quotas"},{"location":"ebsDemo/#important-feature-in-amazone-ebs","text":"EBS provides the most common block storage you will use at AWS. When you launch your EC2 instance, you\u2019re going to need some kind of block storage to go with it. It\u2019s part of the boot volume or maybe it\u2019s a separate data volume. AWS has racks of unused storage that you can provision to sizes as large as you need up to many terabytes in size. When you launch the EC2 instance, the boot volume can attach directly to your EC2 instance, as well as the data volume. These volumes live independent of the EC2 instance themselves . In fact, they may already exist before your EC2 instance launches. When it launches, it simply finds the volume and attaches it the same way you might have an old drive from a laptop. As in the following image, The EC2 instance, when it connects to the EBS volumes, now has a direct communication to these volumes. Nobody else can talk directly to them. It\u2019s how AWS maintains secure communications at all times. The EBS volumes have a lifecycle independent of EC2. What does this mean? Let\u2019s say that this EC2 instance is part of a developer machine that over the weekend, nobody is using because your developers go home over the weekend. So, during those 48 hours, 72 hours, there\u2019s no reason to be paying for EC2 because nobody is using it. All you have to do is simply stop the instance. When you stop EC2, the EBS volumes survive. They just simply are no longer connected to the EC2 instance. See the following image. Then, Monday morning comes around, your developer starts up an EC2 instance, and a brand new instance is created. It reattaches those same EBS volumes the same way you would simply shut down your laptop over the weekend and start it again on Monday. But over the weekend, you didn\u2019t have to pay for EC2. But there\u2019s more we can take advantage of the idea that EBS lives outside of EC2 because what if I want a more powerful machine? Just like I could take your hard drives out of your existing laptop and put it in a stronger laptop, at AWS, you can simply provision a newer, bigger EC2 instance, stop the old EC2 instance, and then just attach the volumes to your brand new EC2. So, now, I\u2019ve got the same boot volume, the same applications, the same data only running newer, bigger, stronger. It\u2019s one of the many advantages EBS brings to you as part of AWS","title":"Important feature in Amazone EBS"},{"location":"ebsDemo/#difference-between-ebs-and-instance-store","text":"EC2 instances support two types for block level storage: - EC2 Instances can be launched using either Elastic Block Store (EBS) or - Instance Store volume as root volumes and additional volumes. EBS volume is network attached drive which results in slow performance but data is persistent meaning even if you reboot the instance data will be there. Instance store provides temporary block-level storage for your instance. This storage is located on disks that are physically attached to the host computer.","title":"Difference between EBS and Instance Store"},{"location":"ebsDemo/#note","text":"EC2 instances can be launched by choosing between AMIs backed by EC2 instance store and AMIs backed by EBS. However, AWS recommends use of EBS backed AMIs, because they launch faster and use persistent storage, please see the AMIs Categories . For more information, please check AWS \u2014 Difference between EBS and Instance Store .","title":"Note"},{"location":"ebsDemo/#demonestrations-creating-an-amazon-ebs-volume","text":"You can create an Amazon EBS volumes, by the following three ways: The root storage through launching instance wizard Create a new EBS volume and attached it to a new/old instance Create from a saved snapshot.","title":"Demonestrations: Creating an Amazon EBS volume"},{"location":"ebsDemo/#demo-ebs-as-a-root-storage-for-ec2-instances","text":"This this demo shows how to use the EBS storage as a root storage while launching your EC2 instance. Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 4: Add Storage , you can change your volume size, encrypte its data, and uncheck the deletion after instance termination. If you terminate the instance, you will find this voulume exists and avialble for attachment. To attach this old volume, see Attaching an Amazon EBS volume to an instance . To mount this old volume, see Mount an attached volume . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume .","title":"Demo: EBS as a root storage for EC2 instances"},{"location":"ebsDemo/#demo-create-an-empty-ebs-volume-and-attach-it-to-a-running-instance","text":"This this demo shows how to craete an empty volume and attach it to an EC2 instance. Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 2: Choose an Instance Type , choose zour favorite availability zone , it is not agood idea to keep it randome choise at this moment. Start creating an empty EBS volume, see create empty EBS volume through the console . /!\\ Note The New empty volume and the EC2 instance have to be in the same availability zone Attaching this new volume, see Attaching an Amazon EBS volume to an instance . Mounting this new volume, see Mount an attached volume . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume .","title":"Demo: Create an empty EBS volume and attach it to a running instance"},{"location":"ebsDemo/#demo-create-an-ebs-volume-from-a-previously-created-snapshot-and-attach-it-to-a-running-instance","text":"This this demo shows how to create an EBS volume from a snapshot and attach it to an EC2 instance, see Creating Amazon EBS snapshots .","title":"Demo: Create an EBS volume from a previously created snapshot and attach it to a running instance"},{"location":"ebsDemo/#creating-a-snapshot-for-an-ebs-volume","text":"To create a snapshot for an EBS volume, you should have already an EC2 instance running with a an EBS root volume or an exist volume, to do so see this demo , then follow the folllowing steps: Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . Choose Snapshots under Elastic Block Store in the navigation pane. Choose Create Snapshot. For Select resource type , choose Volume . For Volume , select the volume . (Optional) Enter a description for the snapshot. (Optional) Choose Add Tag to add tags to your snapshot. For each tag, provide a tag key and a tag value. Choose Create Snapshot . To create a snapshot using the command line You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-snapshot (AWS CLI) New-EC2Snapshot (AWS Tools for Windows PowerShell)","title":"Creating a snapshot for an EBS volume"},{"location":"ebsDemo/#creating-a-multi-volume-snapshot","text":"Use the following procedure to create a snapshot from the volumes of an instance. To create a snapshot for multi-EBS volumes, you should have already an EC2 instance running with multiple EBS volumes, to do so see this demo , To create multi-volume snapshots using the console: Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/ . Choose Snapshots under Elastic Block Store in the navigation pane. Choose Create Snapshot. For Select resource type , choose Instance . Select the instance ID for which you want to create simultaneous backups for all of the attached EBS volumes. Multi-volume snapshots support up to 40 EBS volumes per instance. (Optional) Set Exclude root volume . (Optional) Set Copy tags from volume flag to automatically copy tags from the source volume to the corresponding snapshots. This sets snapshot metadata\u2014such as access policies, attachment information, and cost allocation\u2014to match the source volume. (Optional) Choose Add Tag to add tags to your snapshot. For each tag, provide a tag key and a tag value. Choose Create Snapshot . During snapshot creation, the snapshots are managed together. If one of the snapshots in the volume set fails, the other snapshots are moved to error status for the volume set. You can monitor the progress of your snapshots using CloudWatch Events. After the snapshot creation process completes, CloudWatch generates an event that contains the status and all of the relevant snapshots details for the affected instance. To create multi-volume snapshots using the command line You can use one of the following commands. For more information about these command line interfaces, see Accessing Amazon EC2 . create-snapshot (AWS CLI) New-EC2SnapshotBatch (AWS Tools for Windows PowerShell)","title":"Creating a multi-volume snapshot"},{"location":"ebsDemo/#other-operations-for-the-volumes-snapshots","text":"You can copy snapshots, share snapshots, and create volumes from snapshots. For more information, see the following: Copying an Amazon EBS snapshot Sharing an Amazon EBS snapshot Creating a volume from a snapshot","title":"Other operations for the volumes Snapshots"},{"location":"ebsDemo/#creating-a-volume-from-a-snapshot","text":"Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 2: Choose an Instance Type , choose your favorite availability zone , it is not agood idea to keep it randome choise at this moment. Start creating an EBS volume from a snapshot, see Create an EBS Volume from a Snapshot . Attaching this new volume, see Attaching an Amazon EBS volume to an instance . Mounting this new volume, see Mount an attached volume . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume .","title":"Creating a volume from a snapshot"},{"location":"ebsDemo/#best-practice-while-mounting-a-volume-which-has-been-created-through-a-snapshot","text":"During the mount of an EBS volume that has been created from a snapshot, you may face a problem called: XFS: Filesystem has duplicate UUID \u2013 can\u2019t mount To solve this problem, you need to repair the xfs and then generate a new UUID , as follow: $> sudo xfs_repair -L /dev/xvdh $> sudo xfs_admin -U generate /dev/xvdh Please check the following, How To Solve \u201cXFS: Filesystem has duplicate UUID \u2013 can\u2019t mount\u201d , and xfs_repair(8) - Linux man page for more informtion.","title":"Best practice while mounting a volume which has been created through a snapshot"},{"location":"ebsDemo/#demo-attach-an-ebs-volume-to-a-windows-ami-instance","text":"Please follow the following steps: Start launching your EC2 instance, by following the Launch Instance Wizard In Step 2: Choose an Instance Type , choose your favorite availability zone , it is not agood idea to keep it randome choise at this moment. Start creating an empty EBS volume, see create empty EBS volume through the console . /!\\ Note The New empty volume and the EC2 instance have to be in the same availability zone Attaching this new volume, see Attaching an Amazon EBS volume to an instance . Mounting this new volume, see Making an Amazon EBS volume available for use on Windows . /!\\ Note Mounting an attached volume, is not the same for different types of AMIs, so Windows, not the same like Linux. To demount and de-attaching, and deleting the volume, see Releasing an Amazon EBS volume .","title":"Demo: Attach an EBS volume to a Windows AMI instance"},{"location":"lightsail/","text":"Amazon Web Services Lightsail \u00b6 Amazon Lightsail is the easiest way to get started with AWS for developers, small businesses, students, and other users who need a simple virtual private server (VPS) solution. Lightsail provides developers compute, storage, and networking capacity, and it also provides capabilities to deploy and manage websites and web applications in the cloud. Lightsail includes everything you need to launch your project quickly\u2013a virtual machine, solid state drive (SSD)-based storage, data transfer, Domain Name System (DNS) management, and a static IP\u2013for a low, predictable monthly price. Lightsail Overview \u00b6 For more information about AWS lightsail , please check: Lightsail features Lightsail pricing Lightsail Operating system & application templates \u00b6 Lightsail offers a number of preconfigured, one-click-to-launch application or developer stacks, including WordPress, Plesk, LAMP, Node.js and more. Simple operating systems are also available, including Amazon Linux, Windows Server, Ubuntu, CentOS, and more. Operating systems \u00b6 Applications \u00b6 Stacks \u00b6 Lightsail Demonistration \u00b6 All you have to do is log into your account, and right here on the homepage, you\u2019re going to be able to go and build with Lightsail just by clicking on the Lightsail login. Now, the nice thing with Lightsail is designed to step you easily through the different pieces that you\u2019re going to need without any technical explanation. Please folllow: The first thing that it\u2019s going to ask you is what type of application do you want to run on Lightsail? Now, you could run a WordPress application or maybe get into one of the other more complicated elements. For example, let\u2019s say you want to run a LAMP stack or run a Drupal server. These become easy choices once you make them. Decide how big of an engine do you want to run? Do you want it to have a high volume? High velocity? Or just a nice simple starting one? Got to give it a name. Waita bit, it\u2019s already running and we can go ahead and click on that WordPress site. Use the public IP address, open up a new tab to see the hello world example from wordpress. Watch more detailed information about Lightsail here \u00b6","title":"AWS Lightsail Services"},{"location":"lightsail/#amazon-web-services-lightsail","text":"Amazon Lightsail is the easiest way to get started with AWS for developers, small businesses, students, and other users who need a simple virtual private server (VPS) solution. Lightsail provides developers compute, storage, and networking capacity, and it also provides capabilities to deploy and manage websites and web applications in the cloud. Lightsail includes everything you need to launch your project quickly\u2013a virtual machine, solid state drive (SSD)-based storage, data transfer, Domain Name System (DNS) management, and a static IP\u2013for a low, predictable monthly price.","title":"Amazon Web Services Lightsail"},{"location":"lightsail/#lightsail-overview","text":"For more information about AWS lightsail , please check: Lightsail features Lightsail pricing","title":"Lightsail Overview"},{"location":"lightsail/#lightsail-operating-system-application-templates","text":"Lightsail offers a number of preconfigured, one-click-to-launch application or developer stacks, including WordPress, Plesk, LAMP, Node.js and more. Simple operating systems are also available, including Amazon Linux, Windows Server, Ubuntu, CentOS, and more.","title":"Lightsail Operating system &amp; application templates"},{"location":"lightsail/#operating-systems","text":"","title":"Operating systems"},{"location":"lightsail/#applications","text":"","title":"Applications"},{"location":"lightsail/#stacks","text":"","title":"Stacks"},{"location":"lightsail/#lightsail-demonistration","text":"All you have to do is log into your account, and right here on the homepage, you\u2019re going to be able to go and build with Lightsail just by clicking on the Lightsail login. Now, the nice thing with Lightsail is designed to step you easily through the different pieces that you\u2019re going to need without any technical explanation. Please folllow: The first thing that it\u2019s going to ask you is what type of application do you want to run on Lightsail? Now, you could run a WordPress application or maybe get into one of the other more complicated elements. For example, let\u2019s say you want to run a LAMP stack or run a Drupal server. These become easy choices once you make them. Decide how big of an engine do you want to run? Do you want it to have a high volume? High velocity? Or just a nice simple starting one? Got to give it a name. Waita bit, it\u2019s already running and we can go ahead and click on that WordPress site. Use the public IP address, open up a new tab to see the hello world example from wordpress.","title":"Lightsail Demonistration"},{"location":"lightsail/#watch-more-detailed-information-about-lightsail-here","text":"","title":"Watch more detailed information about Lightsail here"},{"location":"nosql/","text":"","title":"NoSQL DB"},{"location":"othercomputeservices/","text":"Other AWS Compute Services \u00b6 Building and running your application starts with compute, whether you are building enterprise, cloud-native, or mobile applications; or running massive clusters to sequence the human genome. AWS offers a comprehensive portfolio of compute services that allow you to develop, deploy, run, and scale your applications and workloads in the world\u2019s most powerful, secure, and innovative compute cloud. Details about the full range of AWS compute services can be found here . Two other styles of computing may Hyddrosat is interested on them : serverless computing container services AWS Lambda \u00b6 AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume\u2013there is no charge when your code isn\u2019t running. Additional information about Lambda can be found at: https://aws.amazon.com/lambda Watch it here \u00b6 AWS Container Services \u00b6 Please check the Containers on AWS , The most secure, reliable, and scalable way to run containers 1. AWS ECS \u00b6 Amazon Elastic Container Service (Amazon ECS) is a highly scalable, high-performance container orchestration service that supports Docker containers. It allows you to run and scale containerized applications on AWS. You can find more details at: https://aws.amazon.com/ecs/ Please check: Deploy Docker Containers on Amazon Elastic Container Service (Amazon ECS) Running Docker on AWS EC2 Deploying Docker containers on ECS 2. Amazon EKS \u00b6 Amazon Elastic Container Service for Kubernetes (Amazon EKS) makes it straightforward to deploy, manage, and scale containerized applications that use Kubernetes on AWS. Details can be found at: https://aws.amazon.com/eks/ Deploy a Kubernetes Application with Amazon Elastic Container Service for Kubernetes 3. AWS Fargate \u00b6 AWS Fargate is a compute engine for Amazon ECS and Amazon EKS that allows you to run containers without having to manage servers or clusters. You can find more information at: https://aws.amazon.com/fargate/ Run your containers on AWS Fargate","title":"Other AWS Compute Services"},{"location":"othercomputeservices/#other-aws-compute-services","text":"Building and running your application starts with compute, whether you are building enterprise, cloud-native, or mobile applications; or running massive clusters to sequence the human genome. AWS offers a comprehensive portfolio of compute services that allow you to develop, deploy, run, and scale your applications and workloads in the world\u2019s most powerful, secure, and innovative compute cloud. Details about the full range of AWS compute services can be found here . Two other styles of computing may Hyddrosat is interested on them : serverless computing container services","title":"Other AWS Compute Services"},{"location":"othercomputeservices/#aws-lambda","text":"AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume\u2013there is no charge when your code isn\u2019t running. Additional information about Lambda can be found at: https://aws.amazon.com/lambda","title":"AWS Lambda"},{"location":"othercomputeservices/#watch-it-here","text":"","title":"Watch it here"},{"location":"othercomputeservices/#aws-container-services","text":"Please check the Containers on AWS , The most secure, reliable, and scalable way to run containers","title":"AWS Container Services"},{"location":"othercomputeservices/#1-aws-ecs","text":"Amazon Elastic Container Service (Amazon ECS) is a highly scalable, high-performance container orchestration service that supports Docker containers. It allows you to run and scale containerized applications on AWS. You can find more details at: https://aws.amazon.com/ecs/ Please check: Deploy Docker Containers on Amazon Elastic Container Service (Amazon ECS) Running Docker on AWS EC2 Deploying Docker containers on ECS","title":"1. AWS ECS"},{"location":"othercomputeservices/#2-amazon-eks","text":"Amazon Elastic Container Service for Kubernetes (Amazon EKS) makes it straightforward to deploy, manage, and scale containerized applications that use Kubernetes on AWS. Details can be found at: https://aws.amazon.com/eks/ Deploy a Kubernetes Application with Amazon Elastic Container Service for Kubernetes","title":"2. Amazon EKS"},{"location":"othercomputeservices/#3-aws-fargate","text":"AWS Fargate is a compute engine for Amazon ECS and Amazon EKS that allows you to run containers without having to manage servers or clusters. You can find more information at: https://aws.amazon.com/fargate/ Run your containers on AWS Fargate","title":"3. AWS Fargate"},{"location":"pricing/","text":"Pricing and Cost Management in AWS \u00b6 This section shows the pricing and cost management of the AWS cloud services. See the slides that support you while choosing the services and managing your costs: When you use AWS, you spin up resources only when you need them, and you pay only for what you use. Instead of having a fixed cost like you would have in a traditional on-premises environment, you instead incur a variable cost. This is fundamentally different than the way costs were managed on-premise, and therefore, has shifted the way that costs are understood, managed, and optimized. To optimize costs, you want to establish best practices for cost management, and use tools to monitor and analyze costs over time. AWS offers multiple cost management tools through the AWS Management Console. Such as: AWS Cost Explorer AWS Budgets AWS Trusted Advisor AWS Pricing Calculator AWS Cost Explorer \u00b6 AWS Cost Explorer lets you visualize, understand, and manage your AWS costs and usage over time. You can create custom reports (including charts and tabular data) that analyze cost and usage data, both at a high level (e.g., total costs and usage across all accounts) and for highly specific requests (e.g., m2.2xlarge costs within account Y that are tagged project: secretProject). User interface for exploring your AWS Costs It provides breakdowns incluing: by service by cost tag Provides predictions for the next three monthes of costs Gives recommendations for cost optimization Can be accsssed via API AWS Trusted Advisor \u00b6 AWS Trusted Advisor is an online resource to help you reduce costs, increase performance, and improve security by optimizing your AWS environment. Trusted Advisor provides real-time guidance to help you provision your resources by following our best practices. AWS Pricing Calculator \u00b6 Also called Total Ownership Calculator ( TOC ), AWS has announced a new pricing tool, the AWS Pricing Calculator . This new tool, which is currently in beta, can be used to calculate Amazon EC2 and Amazon EBS pricing. For further information about this tool, see this blog post. For other services, you can use the AWS Simple Monthly Calculator . AWS Budgets \u00b6 AWS Budgets allows you to create alerts when your costs or usage exceeds a threshold over a specific time period. You define the time period, whether it be a week, month, or year, and you also define your thresholds. When you exceed the threshold, a notification can be sent out. Refrences \u00b6 How does AWS pricing work? AWS Total Cost of Ownership (TCO) Calculator","title":"AWS Pricing"},{"location":"pricing/#pricing-and-cost-management-in-aws","text":"This section shows the pricing and cost management of the AWS cloud services. See the slides that support you while choosing the services and managing your costs: When you use AWS, you spin up resources only when you need them, and you pay only for what you use. Instead of having a fixed cost like you would have in a traditional on-premises environment, you instead incur a variable cost. This is fundamentally different than the way costs were managed on-premise, and therefore, has shifted the way that costs are understood, managed, and optimized. To optimize costs, you want to establish best practices for cost management, and use tools to monitor and analyze costs over time. AWS offers multiple cost management tools through the AWS Management Console. Such as: AWS Cost Explorer AWS Budgets AWS Trusted Advisor AWS Pricing Calculator","title":"Pricing and Cost Management in AWS"},{"location":"pricing/#aws-cost-explorer","text":"AWS Cost Explorer lets you visualize, understand, and manage your AWS costs and usage over time. You can create custom reports (including charts and tabular data) that analyze cost and usage data, both at a high level (e.g., total costs and usage across all accounts) and for highly specific requests (e.g., m2.2xlarge costs within account Y that are tagged project: secretProject). User interface for exploring your AWS Costs It provides breakdowns incluing: by service by cost tag Provides predictions for the next three monthes of costs Gives recommendations for cost optimization Can be accsssed via API","title":"AWS Cost Explorer"},{"location":"pricing/#aws-trusted-advisor","text":"AWS Trusted Advisor is an online resource to help you reduce costs, increase performance, and improve security by optimizing your AWS environment. Trusted Advisor provides real-time guidance to help you provision your resources by following our best practices.","title":"AWS Trusted Advisor"},{"location":"pricing/#aws-pricing-calculator","text":"Also called Total Ownership Calculator ( TOC ), AWS has announced a new pricing tool, the AWS Pricing Calculator . This new tool, which is currently in beta, can be used to calculate Amazon EC2 and Amazon EBS pricing. For further information about this tool, see this blog post. For other services, you can use the AWS Simple Monthly Calculator .","title":"AWS Pricing Calculator"},{"location":"pricing/#aws-budgets","text":"AWS Budgets allows you to create alerts when your costs or usage exceeds a threshold over a specific time period. You define the time period, whether it be a week, month, or year, and you also define your thresholds. When you exceed the threshold, a notification can be sent out.","title":"AWS Budgets"},{"location":"pricing/#refrences","text":"How does AWS pricing work? AWS Total Cost of Ownership (TCO) Calculator","title":"Refrences"},{"location":"ref/","text":"REFERENCES \u00b6 All Documentations All White Papers AWS Global Infrastructure AWS Free Tier Services","title":"References"},{"location":"ref/#references","text":"All Documentations All White Papers AWS Global Infrastructure AWS Free Tier Services","title":"REFERENCES"},{"location":"security/","text":"","title":"AWS Security"},{"location":"slides/","text":"The Hydrosat Training Sessions Resources \u00b6 The resources in this training is consisting of three sections, the Slides, Tutorials, and videos. Slides \u00b6 Understanding Cloud Concepts Reviewing AWS Core Services AWS Computing, Storage, and Databases AWS Networking and Load Balancing AWS Pricing and Support AWS Security and Access Management Cloud Pricing Understanding AWS Core Services List AWS Security & Architecture Services List Tutorials \u00b6 Start working on AWS by creating an account AWS Computing Run Python Scripts on EC2 Storage volumes in AWS Relational databases in AWS Docker Images on AWS Networking in AWS Load balancing and Scalling in AWS AWS Pricing and Support AWS Security and Access Management Videos \u00b6 Generating SSH key pairs for accessing EC2 instances Set up AWS budget alert after logged in through Console Running Python Script on EC2 Instance, connection established through Linux machine Create, attach, and mount a new EBS volume Detach, unmount, and delete an existing EBS volume Scripts \u00b6 Apache: Webserver installation Linux bash script (Script_linux.sh) Apache: Webserver installation Ubuntu bash script (Script_ubuntu_1.sh) Python web flax: Webserver installation Ubuntu bash script (test.sh) User data script for \u201cPython web flax: Webserver installation Ubuntu bash script\u201d (script_ubuntu.sh) Welcome Hydrosat web page (hydro.html)","title":"Training Resources"},{"location":"slides/#the-hydrosat-training-sessions-resources","text":"The resources in this training is consisting of three sections, the Slides, Tutorials, and videos.","title":"The Hydrosat Training Sessions Resources"},{"location":"slides/#slides","text":"Understanding Cloud Concepts Reviewing AWS Core Services AWS Computing, Storage, and Databases AWS Networking and Load Balancing AWS Pricing and Support AWS Security and Access Management Cloud Pricing Understanding AWS Core Services List AWS Security & Architecture Services List","title":"Slides"},{"location":"slides/#tutorials","text":"Start working on AWS by creating an account AWS Computing Run Python Scripts on EC2 Storage volumes in AWS Relational databases in AWS Docker Images on AWS Networking in AWS Load balancing and Scalling in AWS AWS Pricing and Support AWS Security and Access Management","title":"Tutorials"},{"location":"slides/#videos","text":"Generating SSH key pairs for accessing EC2 instances Set up AWS budget alert after logged in through Console Running Python Script on EC2 Instance, connection established through Linux machine Create, attach, and mount a new EBS volume Detach, unmount, and delete an existing EBS volume","title":"Videos"},{"location":"slides/#scripts","text":"Apache: Webserver installation Linux bash script (Script_linux.sh) Apache: Webserver installation Ubuntu bash script (Script_ubuntu_1.sh) Python web flax: Webserver installation Ubuntu bash script (test.sh) User data script for \u201cPython web flax: Webserver installation Ubuntu bash script\u201d (script_ubuntu.sh) Welcome Hydrosat web page (hydro.html)","title":"Scripts"},{"location":"storage/","text":"Storage in the AWS Web Services \u00b6 Amazon EC2 provides you with flexible, cost effective, and easy-to-use data storage options for your instances. Each option has a unique combination of performance and durability. These storage options can be used independently or in combination to suit your requirements. AWS Storage Options \u00b6 These storage options include the following: Amazon Elastic Block Store (Amazon EBS) Amazon EC2 instance store Amazon Elastic File System (Amazon EFS) Amazon Simple Storage Service (Amazon S3) The following figure shows the relationship between these storage options and your instance. Amazon EBS \u00b6 Amazon EBS provides durable, block-level storage volumes that you can attach to a running instance. You can use Amazon EBS as a primary storage device for data that requires frequent and granular updates. For example, Amazon EBS is the recommended storage option when you run a database on an instance. An EBS volume behaves like a raw, unformatted, external block device that you can attach to a single instance. The volume persists independently from the running life of an instance. After an EBS volume is attached to an instance, you can use it like any other physical hard drive. As illustrated in the previous figure, multiple volumes can be attached to an instance. You can also detach an EBS volume from one instance and attach it to another instance. You can dynamically change the configuration of a volume attached to an instance. To keep a backup copy of your data, you can create a snapshot of an EBS volume, which is stored in Amazon S3. You can create an EBS volume from a snapshot, and attach it to another instance. For more information, see Amazon Elastic Block Store (Amazon EBS) . Amazon EC2 instance store \u00b6 Many instances can access storage from disks that are physically attached to the host computer. This disk storage is referred to as instance store . Instance store provides temporary block-level storage for instances. The data on an instance store volume persists only during the life of the associated instance; if you stop or terminate an instance, any data on instance store volumes is lost. For more information, see Amazon EC2 instance store . Amazon EFS file system \u00b6 Amazon EFS provides scalable file storage for use with Amazon EC2. You can create an EFS file system and configure your instances to mount the file system. You can use an EFS file system as a common data source for workloads and applications running on multiple instances. For more information, see Amazon Elastic File System (Amazon EFS) . Amazon S3 \u00b6 Amazon S3 provides access to reliable and inexpensive data storage infrastructure. It is designed to make web-scale computing easier by enabling you to store and retrieve any amount of data, at any time, from within Amazon EC2 or anywhere on the web. For example, you can use Amazon S3 to store backup copies of your data and applications. Amazon EC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs. For more information, see Amazon Simple Storage Service (Amazon S3) . Adding Storage \u00b6 Every time you launch an instance from an AMI, a root storage device is created for that instance. The root storage device contains all the information necessary to boot the instance. You can specify storage volumes in addition to the root device volume when you create an AMI or launch an instance using block device mapping . For more information, see Block device mapping . You can also attach EBS volumes to a running instance. For more information, see Attaching an Amazon EBS volume to an instance . Storage Pricing \u00b6 For information about storage pricing, open AWS Pricing , scroll down to Services Pricing , choose Storage , and then choose the storage option to open that storage option\u2019s pricing page. For information about estimating the cost of storage, see the AWS Pricing Calculator .","title":"Dealing with AWS Storage"},{"location":"storage/#storage-in-the-aws-web-services","text":"Amazon EC2 provides you with flexible, cost effective, and easy-to-use data storage options for your instances. Each option has a unique combination of performance and durability. These storage options can be used independently or in combination to suit your requirements.","title":"Storage in the AWS Web Services"},{"location":"storage/#aws-storage-options","text":"These storage options include the following: Amazon Elastic Block Store (Amazon EBS) Amazon EC2 instance store Amazon Elastic File System (Amazon EFS) Amazon Simple Storage Service (Amazon S3) The following figure shows the relationship between these storage options and your instance.","title":"AWS Storage Options"},{"location":"storage/#amazon-ebs","text":"Amazon EBS provides durable, block-level storage volumes that you can attach to a running instance. You can use Amazon EBS as a primary storage device for data that requires frequent and granular updates. For example, Amazon EBS is the recommended storage option when you run a database on an instance. An EBS volume behaves like a raw, unformatted, external block device that you can attach to a single instance. The volume persists independently from the running life of an instance. After an EBS volume is attached to an instance, you can use it like any other physical hard drive. As illustrated in the previous figure, multiple volumes can be attached to an instance. You can also detach an EBS volume from one instance and attach it to another instance. You can dynamically change the configuration of a volume attached to an instance. To keep a backup copy of your data, you can create a snapshot of an EBS volume, which is stored in Amazon S3. You can create an EBS volume from a snapshot, and attach it to another instance. For more information, see Amazon Elastic Block Store (Amazon EBS) .","title":"Amazon EBS"},{"location":"storage/#amazon-ec2-instance-store","text":"Many instances can access storage from disks that are physically attached to the host computer. This disk storage is referred to as instance store . Instance store provides temporary block-level storage for instances. The data on an instance store volume persists only during the life of the associated instance; if you stop or terminate an instance, any data on instance store volumes is lost. For more information, see Amazon EC2 instance store .","title":"Amazon EC2 instance store"},{"location":"storage/#amazon-efs-file-system","text":"Amazon EFS provides scalable file storage for use with Amazon EC2. You can create an EFS file system and configure your instances to mount the file system. You can use an EFS file system as a common data source for workloads and applications running on multiple instances. For more information, see Amazon Elastic File System (Amazon EFS) .","title":"Amazon EFS file system"},{"location":"storage/#amazon-s3","text":"Amazon S3 provides access to reliable and inexpensive data storage infrastructure. It is designed to make web-scale computing easier by enabling you to store and retrieve any amount of data, at any time, from within Amazon EC2 or anywhere on the web. For example, you can use Amazon S3 to store backup copies of your data and applications. Amazon EC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs. For more information, see Amazon Simple Storage Service (Amazon S3) .","title":"Amazon S3"},{"location":"storage/#adding-storage","text":"Every time you launch an instance from an AMI, a root storage device is created for that instance. The root storage device contains all the information necessary to boot the instance. You can specify storage volumes in addition to the root device volume when you create an AMI or launch an instance using block device mapping . For more information, see Block device mapping . You can also attach EBS volumes to a running instance. For more information, see Attaching an Amazon EBS volume to an instance .","title":"Adding Storage"},{"location":"storage/#storage-pricing","text":"For information about storage pricing, open AWS Pricing , scroll down to Services Pricing , choose Storage , and then choose the storage option to open that storage option\u2019s pricing page. For information about estimating the cost of storage, see the AWS Pricing Calculator .","title":"Storage Pricing"},{"location":"support/","text":"Support Plans in AWS \u00b6 This section shows the pricing and cost management of the AWS cloud services. See the slides that support you while choosing the services and managing your supporting plans: AWS support plans are designed to give you the right mix of tools and access to expertise so that you can be successful with AWS while optimizing performance, managing risk, and keeping costs under control. Four support plans in AWS \u00b6 As follow: Basic Support Developer Support Business Support Enterprise Support In order to compare the 4 plans, please check the AWS Support Plans . Basic Support \u00b6 This plan of support is included for all AWS customers and includes: Customer Service and Communities - 24x7 access to customer service, documentation , whitepapers , and support forums . AWS Trusted Advisor - Access to the 7 core Trusted Advisor checks and guidance to provision your resources following best practices to increase performance and improve security. AWS Personal Health Dashboard - A personalized view of the health of AWS services, and alerts when your resources are impacted.","title":"AWS Support"},{"location":"support/#support-plans-in-aws","text":"This section shows the pricing and cost management of the AWS cloud services. See the slides that support you while choosing the services and managing your supporting plans: AWS support plans are designed to give you the right mix of tools and access to expertise so that you can be successful with AWS while optimizing performance, managing risk, and keeping costs under control.","title":"Support Plans in AWS"},{"location":"support/#four-support-plans-in-aws","text":"As follow: Basic Support Developer Support Business Support Enterprise Support In order to compare the 4 plans, please check the AWS Support Plans .","title":"Four support plans in AWS"},{"location":"support/#basic-support","text":"This plan of support is included for all AWS customers and includes: Customer Service and Communities - 24x7 access to customer service, documentation , whitepapers , and support forums . AWS Trusted Advisor - Access to the 7 core Trusted Advisor checks and guidance to provision your resources following best practices to increase performance and improve security. AWS Personal Health Dashboard - A personalized view of the health of AWS services, and alerts when your resources are impacted.","title":"Basic Support"}]}